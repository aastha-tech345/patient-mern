{"version":3,"file":"static/js/1165.79e7a0e3.chunk.js","mappings":"0WAuEA,MAmyBA,EAnyBkBA,KA8HhB,IAAIC,EAAUC,2BACVC,EAAcC,aAAaC,QAAQ,iBACnCC,EAAgBC,KAAKC,MAAML,GAC/B,MAAOM,EAAMC,GAAWC,EAAAA,SAAe,IAChCC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,IACpCC,EAAiBC,IAAsBF,EAAAA,EAAAA,UAAS,KAChDG,EAAgBC,IAAsBJ,EAAAA,EAAAA,UAAS,KAC/CK,EAA2BC,IAAgCN,EAAAA,EAAAA,UAAS,KAK3EO,EAAAA,EAAAA,YAAU,KACUC,WAChB,IAAK,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAEF,MAAMC,QAAiBC,EAAAA,EAAAA,IAAS,GAADC,OAAI7B,EAAO,iCAC1C8B,QAAQC,IAAI,SAAkB,OAARJ,QAAQ,IAARA,GAAc,QAANL,EAARK,EAAUK,YAAI,IAAAV,OAAN,EAARA,EAAgBU,MACtCjB,EAA2B,OAARY,QAAQ,IAARA,GAAc,QAANJ,EAARI,EAAUK,YAAI,IAAAT,OAAN,EAARA,EAAgBU,OACnChB,EAA2B,OAARU,QAAQ,IAARA,GAAc,QAANH,EAARG,EAAUK,YAAI,IAAAR,OAAN,EAARA,EAAgBQ,MACnC,MAAME,EAAO,IAAIC,KAEXC,QAAYR,EAAAA,EAAAA,IAAS,GAADC,OACrB7B,EAAO,+CAAA6B,OAA8CK,EAAI,aAAAL,OAAYK,EAAI,UAAAL,OAASrB,IAGvFW,EAAgC,OAAHiB,QAAG,IAAHA,GAAS,QAANX,EAAHW,EAAKJ,YAAI,IAAAP,GAAM,QAANC,EAATD,EAAWO,YAAI,IAAAN,OAAZ,EAAHA,EAAiBW,OAChD,CAAE,MAAOC,GACPR,QAAQQ,MAAM,uBAAwBA,EACxC,GAEFC,EAAW,GACV,IAEH,MAAOC,EAAqBC,IAA0B5B,EAAAA,EAAAA,UAAS,KACxD6B,EAA2BC,IAAgC9B,EAAAA,EAAAA,UAAS,KACpE+B,EAAqBC,IAA0BhC,EAAAA,EAAAA,UAAS,IACzDiC,EAAYC,OACXC,EAAcC,IAAmBpC,EAAAA,EAAAA,UAASiC,IAC1CI,EAASC,IAActC,EAAAA,EAAAA,UAASiC,IAChCM,EAAaC,IAAkBxC,EAAAA,EAAAA,WAAS,GAQzCyC,EAAajC,UACjB,IAAK,IAADkC,EAAAC,EAAAC,EAAAC,EACF,GAAIR,EAAQS,SAASX,GAEnB,YADAY,MAAM,8CAGR,MAAM1B,EAAO,IAAIC,KAAKa,GAChBa,EAAQ,IAAI1B,KAAKe,GAGvBpB,QAAQC,IAAIG,EAAM2B,GAElB,MAAMzB,QAAYR,EAAAA,EAAAA,IAAS,GAADC,OACrB7B,EAAO,+CAAA6B,OAA8CK,EAAI,aAAAL,OAAYgC,EAAK,UAAAhC,OAASrB,IAExFsB,QAAQC,IAAI,SAAa,OAAHK,QAAG,IAAHA,GAAS,QAANmB,EAAHnB,EAAKJ,YAAI,IAAAuB,OAAN,EAAHA,EAAWO,SAIjCrB,EAA0B,OAAHL,QAAG,IAAHA,GAAS,QAANoB,EAAHpB,EAAKJ,YAAI,IAAAwB,OAAN,EAAHA,EAAWxB,MAClCW,EAAgC,OAAHP,QAAG,IAAHA,GAAS,QAANqB,EAAHrB,EAAKJ,YAAI,IAAAyB,OAAN,EAAHA,EAAWxB,OACxCrB,EAAgB,OAAHwB,QAAG,IAAHA,GAAS,QAANsB,EAAHtB,EAAKJ,YAAI,IAAA0B,OAAN,EAAHA,EAAW/C,UAE1B,CAAE,MAAO2B,GACPR,QAAQC,IAAIO,EACd,IAQFlB,EAAAA,EAAAA,YAAU,KAER6B,EAAgBH,GAChBK,EAAWL,EAAU,GACpB,KACH1B,EAAAA,EAAAA,YAAU,KACRkC,GAAY,GACX,CAACF,EAAa5C,KAsBjBY,EAAAA,EAAAA,YAAU,KApBc2C,MACtB,IACE,MAAMC,EAAQ,IAAI7B,KAAKa,GACvBlB,QAAQC,IAAI,QAASiC,GACrB,MAAMC,EAAiB,OAALD,QAAK,IAALA,OAAK,EAALA,EAAOE,cACnBC,EAAkB,OAALH,QAAK,IAALA,OAAK,EAALA,EAAOI,WACpBC,EAAgB,OAALL,QAAK,IAALA,OAAK,EAALA,EAAOM,UAClBC,EAAevD,EAAewD,QAAQC,IAC1C,MAAMC,EAAU,IAAIvC,KAAgB,OAAXsC,QAAW,IAAXA,OAAW,EAAXA,EAAaE,oBAChCC,EAAmB,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASR,cACrBW,EAAoB,OAAPH,QAAO,IAAPA,OAAO,EAAPA,EAASN,WACtBU,EAAkB,OAAPJ,QAAO,IAAPA,OAAO,EAAPA,EAASJ,UAC1B,OAAOL,IAAcW,GAAaT,IAAeU,GAAcR,IAAaS,CAAQ,IAEtFjC,EAAuB0B,EACzB,CAAE,MAAOjC,GACPR,QAAQC,IAAIO,EACd,GAIAyB,EAAiB,GAChB,CAACf,IACJlB,QAAQC,IAAI,YAAaiB,GAEzB,MAAO+B,EAAeC,IAAoBnE,EAAAA,EAAAA,UAAS,YAC7CoE,GAAWC,EAAAA,EAAAA,MACXC,EAAU,CACd,CACEC,MAAO,QACPC,UAAW,OAEb,CACED,MAAO,WACPC,UAAW,QACXC,OAASC,IAASC,EAAAA,EAAAA,KAAA,KAAAC,SAAIF,KAExB,CACEH,MAAO,OACPC,UAAW,OACXC,OAASC,IAASC,EAAAA,EAAAA,KAAA,KAAAC,SAAIF,IACtBG,OAAQA,CAACC,EAAGC,IAAMD,EAAEE,KAAKC,cAAcF,EAAEC,OAE3C,CACET,MAAO,MACPC,UAAW,MACXK,OAAQA,CAACC,EAAGC,IAAMD,EAAEI,IAAMH,EAAEG,KAE9B,CACEX,MAAO,MACPC,UAAW,MACXK,OAAQA,CAACC,EAAGC,IAAMD,EAAEK,IAAIF,cAAcF,EAAEI,MAE1C,CACEZ,MAAO,cACPC,UAAW,qBACXC,OAASC,GACM,IAAIpD,KAAKoD,GAEnBU,eAAe,QAAS,CACvBC,KAAM,UACNC,MAAO,UACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRC,QAAQ,IAETC,QAAQ,MAAO,KAGpBd,OAAQA,CAACC,EAAGC,IAAMD,EAAEhB,mBAAmBmB,cAAcF,EAAEjB,qBAEzD,CACES,MAAO,SAEPE,OAASC,IAGLC,EAAAA,EAAAA,KAAA,UACEiB,UAAU,kBACVC,QAAUC,GAAM1B,EAAS,eAAgB,CAAE2B,MAAOrB,IAAQE,SAC3D,WAQHoB,EAAe,CACnBC,SAAUA,CAACC,EAAiBC,KAC1BlF,QAAQC,IAAI,oBAADF,OAAqBkF,GAAmB,iBAAkBC,EAAa,EAEpFC,iBAAmBC,IAAM,CACvBC,SAA0B,kBAAhBD,EAAOrB,KAEjBA,KAAMqB,EAAOrB,QAuYjB,OApYA/D,QAAQC,IAAI,sBAAuBS,IAqYjC4E,EAAAA,EAAAA,MAAA,OAAKX,UAAU,kBAAiBhB,SAAA,EAC9BD,EAAAA,EAAAA,KAAA,OAAKiB,UAAU,MAAKhB,UAClBD,EAAAA,EAAAA,KAAA,OAAKiB,UAAU,YAAWhB,UACxBD,EAAAA,EAAAA,KAAA,OAAKiB,UAAU,YAAYY,MAAO,CAAEC,UAAW,UAAW7B,UACxD2B,EAAAA,EAAAA,MAAA,MAAA3B,SAAA,CAAI,YAAuB,OAAbpF,QAAa,IAAbA,OAAa,EAAbA,EAAewF,eAKnCL,EAAAA,EAAAA,KAAA,OAAKiB,UAAU,MAAKhB,UAClBD,EAAAA,EAAAA,KAAA,OAAKiB,UAAU,YAAWhB,UACxBD,EAAAA,EAAAA,KAAC+B,EAAAA,EAAe,CACdzG,gBAAiBA,EACjB8B,oBAAqBA,EACrB1B,0BAA2BA,SAKjCkG,EAAAA,EAAAA,MAAA,OAAKX,UAAU,MAAKhB,SAAA,EAClBD,EAAAA,EAAAA,KAAA,OAAKiB,UAAU,WAAUhB,UACvBD,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAEG,WAAY,aAAcC,UAAW,QAAShC,UAC1D2B,EAAAA,EAAAA,MAAA,MAAA3B,SAAA,CAAI,iBAAe/C,GAA6B,UAGpD8C,EAAAA,EAAAA,KAAA,OAAKiB,UAAU,WAAUhB,UACvB2B,EAAAA,EAAAA,MAAA,OAAKX,UAAU,MAAKhB,SAAA,EAClBD,EAAAA,EAAAA,KAAA,OAAKiB,UAAU,WAAUhB,UACvBD,EAAAA,EAAAA,KAACkC,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAanC,UAC9CD,EAAAA,EAAAA,KAACqC,EAAAA,EAAa,CAACC,WAAY,CAAC,kBAAkBrC,UAC5CD,EAAAA,EAAAA,KAACuC,EAAAA,EAAc,CACbC,MAAM,OACNC,MAAOjF,EACP8D,SA1jBgB5E,IAChCe,EAAgBf,EAAK,EA0jBLgG,YAAY,aACZC,MAAM,EACNC,aAAa,EACbC,MAAO,CAAC,OAAQ,QAAS,gBAKjC7C,EAAAA,EAAAA,KAAA,OAAKiB,UAAU,WAAUhB,UACvBD,EAAAA,EAAAA,KAACkC,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAanC,UAC9CD,EAAAA,EAAAA,KAACqC,EAAAA,EAAa,CAACC,WAAY,CAAC,kBAAkBrC,UAC5CD,EAAAA,EAAAA,KAACuC,EAAAA,EAAc,CACbC,MAAM,KACNC,MAAO/E,EACP4D,SAtkBW5E,IAC3BiB,EAAWjB,EAAK,EAskBAgG,YAAY,aACZC,MAAM,EACNC,aAAa,EACbC,MAAO,CAAC,OAAQ,QAAS,qBAQrCjB,EAAAA,EAAAA,MAAA,OAAKX,UAAU,uBAAsBhB,SAAA,EACnCD,EAAAA,EAAAA,KAAA,UAAQiB,UAAU,uBAAuBC,QAASpD,EAAWmC,SAAC,YAG9DD,EAAAA,EAAAA,KAAA,UAAQiB,UAAU,kBAAkBC,QAtjB1B4B,KAChBrF,EAAgBH,GAChBK,EAAWL,GACXO,GAAgBD,EAAY,EAmjBiCqC,SAAC,iBAM5DD,EAAAA,EAAAA,KAAA,OAAKiB,UAAU,MAAKhB,UAClBD,EAAAA,EAAAA,KAAA,OAAKiB,UAAU,YAAWhB,UACxBD,EAAAA,EAAAA,KAAA,OAAKiB,UAAU,wBAAuBhB,UACpCD,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,CACJ1B,aAAc,CACZ2B,KAAMzD,KACH8B,GAEL1B,QAASA,EACTsD,WAAYjG,EACZkG,YAAY,WAMpBlD,EAAAA,EAAAA,KAAA,OAAKiB,UAAU,MAAKhB,UAClBD,EAAAA,EAAAA,KAAA,OAAKiB,UAAU,YAAWhB,UACxBD,EAAAA,EAAAA,KAAA,OAAKiB,UAAU,kCAAiChB,UAC9CD,EAAAA,EAAAA,KAACmD,EAAAA,EAAK,CAACC,QAAS,EAAEnD,UAChBD,EAAAA,EAAAA,KAACqD,EAAAA,EAAU,CAAC5G,MAAOtB,EAAWH,KAAMA,EAAMsG,SAnpBjCgC,CAACC,EAAOd,KAC3BxH,EAAQwH,EAAM,cAupBR,C,sGCr1BV,MAkMA,EAlMwBe,IAA0E,IAAzE,gBAAElI,EAAe,oBAAE8B,EAAmB,0BAAE1B,GAA2B8H,EAM1F,MAAM/D,GAAWC,EAAAA,EAAAA,MAMjB,OACEkC,EAAAA,EAAAA,MAAC6B,EAAAA,GAAI,CAAAxD,SAAA,EACHD,EAAAA,EAAAA,KAAC0D,EAAAA,GAAI,CAACC,GAAI,EAAGC,GAAI,EAAE3D,UACjBD,EAAAA,EAAAA,KAAC6D,EAAAA,GAAa,CACZ5C,UAAU,OACV6C,MAAM,UACNrB,OACEb,EAAAA,EAAAA,MAAAmC,EAAAA,SAAA,CAAA9D,SAAA,CAAE,UACQ,KACR2B,EAAAA,EAAAA,MAAA,OAAKX,UAAU,iBAAgBhB,SAAA,CAAC,wBAAsB3E,GAAmB,QAG7E4F,QAASA,IAAMzB,EAAS,gBACxBoC,MAAO,CAAEmC,OAAQ,WAejBC,OACEjE,EAAAA,EAAAA,KAACkE,EAAAA,GAAU,CACTjD,UAAU,YACVY,MAAO,CAAEsC,OAAQ,eA0DzBnE,EAAAA,EAAAA,KAAC0D,EAAAA,GAAI,CAACC,GAAI,EAAGC,GAAI,EAAE3D,UACjBD,EAAAA,EAAAA,KAAC6D,EAAAA,GAAa,CACZhC,MAAO,CAAEmC,OAAQ,WACjB9C,QAASA,KA9FfzB,EAAS,YA8FoC,EACvCwB,UAAU,OACV6C,MAAM,UACNrB,OACEb,EAAAA,EAAAA,MAAAmC,EAAAA,SAAA,CAAA9D,SAAA,CACG,eAAgB,KACjB2B,EAAAA,EAAAA,MAAA,OAAKX,UAAU,iBAAgBhB,SAAA,CAAC,yBACFvE,GAA6B,QAkB/DuI,OACEjE,EAAAA,EAAAA,KAACkE,EAAAA,GAAU,CACTjD,UAAU,YACVY,MAAO,CAAEsC,OAAQ,gBA0DpB,C","sources":["views/dashboard/Dashboard.js","views/widgets/WidgetsDropdown.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { getFetch } from '../../api/Api'\n// import {\n//   CAvatar,\n//   CButton,\n//   CButtonGroup,\n//   CCard,\n//   CCardBody,\n//   CCardFooter,\n//   CCardHeader,\n//   CCol,\n//   CProgress,\n//   CRow,\n//   CTable,\n//   CTableBody,\n//   CTableDataCell,\n//   CTableHead,\n//   CTableHeaderCell,\n//   CTableRow,\n// } from '@coreui/react'\n// import { CChartLine } from '@coreui/react-chartjs'\n// import { getStyle, hexToRgba } from '@coreui/utils'\n// import CIcon from '@coreui/icons-react'\n// import {\n//   cibCcAmex,\n//   cibCcApplePay,\n//   cibCcMastercard,\n//   cibCcPaypal,\n//   cibCcStripe,\n//   cibCcVisa,\n//   cibGoogle,\n//   cibFacebook,\n//   cibLinkedin,\n//   cifBr,\n//   cifEs,\n//   cifFr,\n//   cifIn,\n//   cifPl,\n//   cifUs,\n//   cibTwitter,\n//   cilCloudDownload,\n//   cilPeople,\n//   cilUser,\n//   cilUserFemale,\n// } from '@coreui/icons'\n\n// import avatar1 from 'src/assets/images/avatars/1.jpg'\n// import avatar2 from 'src/assets/images/avatars/2.jpg'\n// import avatar3 from 'src/assets/images/avatars/3.jpg'\n// import avatar4 from 'src/assets/images/avatars/4.jpg'\n// import avatar5 from 'src/assets/images/avatars/5.jpg'\n// import avatar6 from 'src/assets/images/avatars/6.jpg'\n\n// import WidgetsBrand from '../widgets/WidgetsBrand'\nimport { Divider, Radio, Table } from 'antd'\nimport WidgetsDropdown from '../widgets/WidgetsDropdown'\nimport { DemoContainer } from '@mui/x-date-pickers/internals/demo'\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider'\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker'\nimport dayjs from 'dayjs'\nimport { DateTimePicker } from '@mui/x-date-pickers'\nimport { DateRangePicker } from '@mui/lab'\nimport { Button } from '@coreui/coreui'\nimport { useNavigate } from 'react-router-dom'\nimport Typography from '@mui/material/Typography'\nimport Pagination from '@mui/material/Pagination'\nimport Stack from '@mui/material/Stack'\nimport '../dashboard/Dashboard.css'\n// import { API_URL } from 'src/constant'\n\nconst Dashboard = () => {\n  // let data = process.env.API_URL\n  // console.log('data', data)\n  // const random = (min, max) => Math.floor(Math.random() * (max - min + 1) + min)\n\n  // const progressExample = [\n  //   { title: 'Visits', value: '29.703 Users', percent: 40, color: 'success' },\n  //   { title: 'Unique', value: '24.093 Users', percent: 20, color: 'info' },\n  //   { title: 'Pageviews', value: '78.706 Views', percent: 60, color: 'warning' },\n  //   { title: 'New Users', value: '22.123 Users', percent: 80, color: 'danger' },\n  //   { title: 'Bounce Rate', value: 'Average Rate', percent: 40.15, color: 'primary' },\n  // ]\n\n  // const progressGroupExample1 = [\n  //   { title: 'Monday', value1: 34, value2: 78 },\n  //   { title: 'Tuesday', value1: 56, value2: 94 },\n  //   { title: 'Wednesday', value1: 12, value2: 67 },\n  //   { title: 'Thursday', value1: 43, value2: 91 },\n  //   { title: 'Friday', value1: 22, value2: 73 },\n  //   { title: 'Saturday', value1: 53, value2: 82 },\n  //   { title: 'Sunday', value1: 9, value2: 69 },\n  // ]\n\n  // const progressGroupExample2 = [\n  //   { title: 'Male', icon: cilUser, value: 53 },\n  //   { title: 'Female', icon: cilUserFemale, value: 43 },\n  // ]\n\n  // const progressGroupExample3 = [\n  //   { title: 'Organic Search', icon: cibGoogle, percent: 56, value: '191,235' },\n  //   { title: 'Facebook', icon: cibFacebook, percent: 15, value: '51,223' },\n  //   { title: 'Twitter', icon: cibTwitter, percent: 11, value: '37,564' },\n  //   { title: 'LinkedIn', icon: cibLinkedin, percent: 8, value: '27,319' },\n  // ]\n\n  // const tableExample = [\n  //   {\n  //     avatar: { src: avatar1, status: 'success' },\n  //     user: {\n  //       name: 'Yiorgos Avraamu',\n  //       new: true,\n  //       registered: 'Jan 1, 2021',\n  //     },\n  //     country: { name: 'USA', flag: cifUs },\n  //     usage: {\n  //       value: 50,\n  //       period: 'Jun 11, 2021 - Jul 10, 2021',\n  //       color: 'success',\n  //     },\n  //     payment: { name: 'Mastercard', icon: cibCcMastercard },\n  //     activity: '10 sec ago',\n  //   },\n  //   {\n  //     avatar: { src: avatar2, status: 'danger' },\n  //     user: {\n  //       name: 'Avram Tarasios',\n  //       new: false,\n  //       registered: 'Jan 1, 2021',\n  //     },\n  //     country: { name: 'Brazil', flag: cifBr },\n  //     usage: {\n  //       value: 22,\n  //       period: 'Jun 11, 2021 - Jul 10, 2021',\n  //       color: 'info',\n  //     },\n  //     payment: { name: 'Visa', icon: cibCcVisa },\n  //     activity: '5 minutes ago',\n  //   },\n  //   {\n  //     avatar: { src: avatar3, status: 'warning' },\n  //     user: { name: 'Quintin Ed', new: true, registered: 'Jan 1, 2021' },\n  //     country: { name: 'India', flag: cifIn },\n  //     usage: {\n  //       value: 74,\n  //       period: 'Jun 11, 2021 - Jul 10, 2021',\n  //       color: 'warning',\n  //     },\n  //     payment: { name: 'Stripe', icon: cibCcStripe },\n  //     activity: '1 hour ago',\n  //   },\n  //   {\n  //     avatar: { src: avatar4, status: 'secondary' },\n  //     user: { name: 'Enéas Kwadwo', new: true, registered: 'Jan 1, 2021' },\n  //     country: { name: 'France', flag: cifFr },\n  //     usage: {\n  //       value: 98,\n  //       period: 'Jun 11, 2021 - Jul 10, 2021',\n  //       color: 'danger',\n  //     },\n  //     payment: { name: 'PayPal', icon: cibCcPaypal },\n  //     activity: 'Last month',\n  //   },\n  //   {\n  //     avatar: { src: avatar5, status: 'success' },\n  //     user: {\n  //       name: 'Agapetus Tadeáš',\n  //       new: true,\n  //       registered: 'Jan 1, 2021',\n  //     },\n  //     country: { name: 'Spain', flag: cifEs },\n  //     usage: {\n  //       value: 22,\n  //       period: 'Jun 11, 2021 - Jul 10, 2021',\n  //       color: 'primary',\n  //     },\n  //     payment: { name: 'Google Wallet', icon: cibCcApplePay },\n  //     activity: 'Last week',\n  //   },\n  //   {\n  //     avatar: { src: avatar6, status: 'danger' },\n  //     user: {\n  //       name: 'Friderik Dávid',\n  //       new: true,\n  //       registered: 'Jan 1, 2021',\n  //     },\n  //     country: { name: 'Poland', flag: cifPl },\n  //     usage: {\n  //       value: 43,\n  //       period: 'Jun 11, 2021 - Jul 10, 2021',\n  //       color: 'success',\n  //     },\n  //     payment: { name: 'Amex', icon: cibCcAmex },\n  //     activity: 'Last week',\n  //   },\n  // ]\n\n  let API_URL = process.env.REACT_APP_API_URL\n  let patientData = localStorage.getItem('patientRecord')\n  let patientRecord = JSON.parse(patientData)\n  const [page, setPage] = React.useState(1)\n  const [pageCount, setPageCount] = useState(1)\n  const [numberOfPatient, setNumberOfPatient] = useState('')\n  const [apointmentList, setAppointmentList] = useState([])\n  const [numberOfTodaysAppointment, setNumberOfTodaysAppointment] = useState('')\n\n  const handleChange = (event, value) => {\n    setPage(value)\n  }\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // const response = await getFetch(`${API_URL}/api/patient/doc/${patientRecord._id}`)\n        const response = await getFetch(`${API_URL}/api/patient/patientByDoctor`)\n        console.log('dasRes', response?.data?.data)\n        setNumberOfPatient(response?.data?.count)\n        setAppointmentList(response?.data?.data)\n        const date = new Date()\n        // const date1 = new Date()\n        const res = await getFetch(\n          `${API_URL}/api/patient/nextAppointmentDate?startDate=${date}&endDate=${date}&page=${page}`,\n        )\n        // console.log('gaurav', res?.data?.data?.length)\n        setNumberOfTodaysAppointment(res?.data?.data?.length)\n      } catch (error) {\n        console.error('Error fetching data:', error)\n      }\n    }\n    fetchData()\n  }, [])\n\n  const [filteredAppointment, setFilteredAppointment] = useState([])\n  const [filteredAppointmentNumber, setFilteredAppointmentNumber] = useState([])\n  const [appointmentDataList, setAppointmentDataList] = useState([])\n  const todayDate = dayjs()\n  const [startingDate, setStartingDate] = useState(todayDate)\n  const [endDate, setEndDate] = useState(todayDate)\n  const [updateState, setUpdateState] = useState(false)\n  const handleStartingDateChange = (date) => {\n    setStartingDate(date)\n  }\n  const handleEndDateChange = (date) => {\n    setEndDate(date)\n  }\n\n  const dateSubmit = async (e) => {\n    try {\n      if (endDate.isBefore(startingDate)) {\n        alert('End date cannot be earlier than start date')\n        return\n      }\n      const date = new Date(startingDate)\n      const date1 = new Date(endDate)\n      // const formattedStartDate = date.toISOString().split('T')[0] + 'T00:00:00.000Z'\n      // const formattedEndDate = date1.toISOString().split('T')[0] + 'T00:00:00.000Z'\n      console.log(date, date1)\n\n      const res = await getFetch(\n        `${API_URL}/api/patient/nextAppointmentDate?startDate=${date}&endDate=${date1}&page=${page}`,\n      )\n      console.log('Gaurav', res?.data?.success)\n      // if (res?.data?.success === 'success') {\n      //   setFilteredAppointmentNumber(0)\n      // }\n      setFilteredAppointment(res?.data?.data)\n      setFilteredAppointmentNumber(res?.data?.count)\n      setPageCount(res?.data?.pageCount)\n      // console.log('resData', res)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const dateReset = () => {\n    setStartingDate(todayDate)\n    setEndDate(todayDate)\n    setUpdateState(!updateState)\n  }\n  useEffect(() => {\n    // dateSubmit()\n    setStartingDate(todayDate)\n    setEndDate(todayDate)\n  }, [])\n  useEffect(() => {\n    dateSubmit()\n  }, [updateState, page])\n\n  const getFilteredDate = () => {\n    try {\n      const today = new Date(startingDate)\n      console.log('today', today)\n      const todayYear = today?.getFullYear()\n      const todayMonth = today?.getMonth()\n      const todayDay = today?.getDate()\n      const filteredList = apointmentList.filter((appointment) => {\n        const element = new Date(appointment?.nextApointmentDate)\n        const givenYear = element?.getFullYear()\n        const givenMonth = element?.getMonth()\n        const givenDay = element?.getDate()\n        return todayYear === givenYear && todayMonth === givenMonth && todayDay === givenDay\n      })\n      setAppointmentDataList(filteredList)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    getFilteredDate()\n  }, [startingDate])\n  console.log('dateValue', startingDate)\n  // console.log('appointmentDataList', appointmentDataList)\n  const [selectionType, setSelectionType] = useState('checkbox')\n  const navigate = useNavigate()\n  const columns = [\n    {\n      title: 'CR no',\n      dataIndex: 'crn',\n    },\n    {\n      title: 'Phone no',\n      dataIndex: 'phone',\n      render: (text) => <a>{text}</a>,\n    },\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      render: (text) => <a>{text}</a>,\n      sorter: (a, b) => a.name.localeCompare(b.name),\n    },\n    {\n      title: 'Age',\n      dataIndex: 'age',\n      sorter: (a, b) => a.age - b.age,\n    },\n    {\n      title: 'Sex',\n      dataIndex: 'sex',\n      sorter: (a, b) => a.sex.localeCompare(b.sex),\n    },\n    {\n      title: 'Appointment',\n      dataIndex: 'nextApointmentDate',\n      render: (text) => {\n        const date = new Date(text)\n        const formattedDate = date\n          .toLocaleString('en-IN', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: true,\n          })\n          .replace(/\\//g, '/')\n        return formattedDate\n      },\n      sorter: (a, b) => a.nextApointmentDate.localeCompare(b.nextApointmentDate),\n    },\n    {\n      title: 'Action',\n      // dataIndex: 'sex',\n      render: (text) => {\n        // console.log('Gaurasadsadv', text)\n        return (\n          <button\n            className=\"btn btn-primary\"\n            onClick={(e) => navigate('/patientPage', { state: text })}\n          >\n            View\n          </button>\n        )\n      },\n    },\n  ]\n\n  const rowSelection = {\n    onChange: (selectedRowKeys, selectedRows) => {\n      console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows)\n    },\n    getCheckboxProps: (record) => ({\n      disabled: record.name === 'Disabled User',\n      // Column configuration not to be checked\n      name: record.name,\n    }),\n  }\n  console.log('appointmentDataList', filteredAppointment)\n  // return (\n  //   <>\n  //     <div className=\"mb-5 mt-2\" style={{ textAlign: 'center' }}>\n  //       <h2>Welcome, {patientRecord?.name} </h2>\n  //     </div>\n  //     {/* {console.log('numberOfPatient', numberOfPatient)}\n  //     {console.log('appointmentDataList', appointmentDataList)}\n  //     {console.log('filteredAppointmentNumber', filteredAppointmentNumber)} */}\n\n  //     <WidgetsDropdown\n  //       numberOfPatient={numberOfPatient}\n  //       appointmentDataList={appointmentDataList}\n  //       numberOfTodaysAppointment={numberOfTodaysAppointment}\n  //     />\n  //     {/* <hr /> */}\n  //     <div className=\"row\">\n  //       <div className=\"col-md-2 col-sm-2\">\n  //         <div style={{ fontFamily: 'sans-serif', marginTop: '1rem' }}>\n  //           <h5>\n  //             {'Appointments: '}\n  //             {filteredAppointmentNumber || 0}\n  //           </h5>\n  //           {/* <h4>\n  //             {'Appointments:'}\n  //             {filteredAppointmentNumber}\n  //           </h4> */}\n  //         </div>\n  //       </div>\n  //       <div className=\"col-md-10 col-sm-10 \">\n  //         <div className=\"row \">\n  //           <div className=\"col-md-6 col-sm-6\">\n  //             {' '}\n  //             <div>\n  //               <LocalizationProvider dateAdapter={AdapterDayjs}>\n  //                 <DemoContainer components={['DateTimePicker']}>\n  //                   <DateTimePicker\n  //                     label=\"From\"\n  //                     value={startingDate}\n  //                     onChange={handleStartingDateChange}\n  //                     inputFormat=\"YYYY-MM-DD\"\n  //                     ampm={false}\n  //                     ampmInClock={false}\n  //                     views={['year', 'month', 'day']}\n  //                     // sx={{ width: '100px' }}\n  //                     // className=\"w-50\"\n  //                     // className=\"w-auto\"\n  //                     style={{ overflowX: 'hidden !important' }}\n  //                   />\n  //                 </DemoContainer>\n  //               </LocalizationProvider>\n  //             </div>\n  //           </div>\n  //           <div className=\"col-md-6 col-sm-6 \">\n  //             {' '}\n  //             <div>\n  //               <LocalizationProvider dateAdapter={AdapterDayjs}>\n  //                 <DemoContainer components={['DateTimePicker']}>\n  //                   <DateTimePicker\n  //                     label=\"To\"\n  //                     value={endDate}\n  //                     onChange={handleEndDateChange}\n  //                     inputFormat=\"YYYY-MM-DD\"\n  //                     ampm={false}\n  //                     ampmInClock={false}\n  //                     views={['year', 'month', 'day']}\n  //                     // className=\"w-50\"\n  //                   />\n  //                 </DemoContainer>\n  //               </LocalizationProvider>\n  //             </div>\n  //           </div>\n  //         </div>\n  //         <div className=\"col-sm-2 d-flex  mb-3\">\n  //           {/* <div className=\"\"> */}\n  //           {/* <div> */}\n  //           <button className=\"btn btn-primary mt-3 me-2\" onClick={dateSubmit}>\n  //             Search\n  //           </button>\n  //           {/* </div> */}\n  //           {/* <div> */}\n  //           <button className=\"btn btn-primary mt-3 \" onClick={dateReset}>\n  //             Reset\n  //           </button>\n  //           {/* </div> */}\n  //           {/* </div> */}\n  //         </div>\n  //       </div>\n  //     </div>\n  //     {/* class=\"ant-table-tbody\" */}\n  //     <div className=\"mt-2 table-responsive\">\n  //       <Table\n  //         rowSelection={{\n  //           type: selectionType,\n  //           ...rowSelection,\n  //         }}\n  //         columns={columns}\n  //         dataSource={filteredAppointment}\n  //         pagination={false}\n  //         // className=\"table-responsive\"\n  //       />\n  //     </div>\n  //     <div className=\"d-flex justify-content-end mt-2\">\n  //       <Stack spacing={2}>\n  //         {/* <Typography>Page: {page}</Typography> */}\n  //         <Pagination count={pageCount} page={page} onChange={handleChange} />\n  //       </Stack>\n  //     </div>\n  //     {/* <div style={{ display: 'flx' }}>\n  //       <div></div>\n  //       <div>\n  //         <WidgetsDropdown numberOfPatient={numberOfPatient} />\n  //       </div>\n  //     </div> */}\n  //     {/* <CCard className=\"mb-4\">\n  //       <CCardBody>\n  //         <CRow>\n  //           <CCol sm={5}>\n  //             <h4 id=\"traffic\" className=\"card-title mb-0\">\n  //               Traffic\n  //             </h4>\n  //             <div className=\"small text-medium-emphasis\">January - July 2021</div>\n  //           </CCol>\n  //           <CCol sm={7} className=\"d-none d-md-block\">\n  //             <CButton color=\"primary\" className=\"float-end\">\n  //               <CIcon icon={cilCloudDownload} />\n  //             </CButton>\n  //             <CButtonGroup className=\"float-end me-3\">\n  //               {['Day', 'Month', 'Year'].map((value) => (\n  //                 <CButton\n  //                   color=\"outline-secondary\"\n  //                   key={value}\n  //                   className=\"mx-0\"\n  //                   active={value === 'Month'}\n  //                 >\n  //                   {value}\n  //                 </CButton>\n  //               ))}\n  //             </CButtonGroup>\n  //           </CCol>\n  //         </CRow>\n  //         <CChartLine\n  //           style={{ height: '300px', marginTop: '40px' }}\n  //           data={{\n  //             labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  //             datasets: [\n  //               {\n  //                 label: 'My First dataset',\n  //                 backgroundColor: hexToRgba(getStyle('--cui-info'), 10),\n  //                 borderColor: getStyle('--cui-info'),\n  //                 pointHoverBackgroundColor: getStyle('--cui-info'),\n  //                 borderWidth: 2,\n  //                 data: [\n  //                   random(50, 200),\n  //                   random(50, 200),\n  //                   random(50, 200),\n  //                   random(50, 200),\n  //                   random(50, 200),\n  //                   random(50, 200),\n  //                   random(50, 200),\n  //                 ],\n  //                 fill: true,\n  //               },\n  //               {\n  //                 label: 'My Second dataset',\n  //                 backgroundColor: 'transparent',\n  //                 borderColor: getStyle('--cui-success'),\n  //                 pointHoverBackgroundColor: getStyle('--cui-success'),\n  //                 borderWidth: 2,\n  //                 data: [\n  //                   random(50, 200),\n  //                   random(50, 200),\n  //                   random(50, 200),\n  //                   random(50, 200),\n  //                   random(50, 200),\n  //                   random(50, 200),\n  //                   random(50, 200),\n  //                 ],\n  //               },\n  //               {\n  //                 label: 'My Third dataset',\n  //                 backgroundColor: 'transparent',\n  //                 borderColor: getStyle('--cui-danger'),\n  //                 pointHoverBackgroundColor: getStyle('--cui-danger'),\n  //                 borderWidth: 1,\n  //                 borderDash: [8, 5],\n  //                 data: [65, 65, 65, 65, 65, 65, 65],\n  //               },\n  //             ],\n  //           }}\n  //           options={{\n  //             maintainAspectRatio: false,\n  //             plugins: {\n  //               legend: {\n  //                 display: false,\n  //               },\n  //             },\n  //             scales: {\n  //               x: {\n  //                 grid: {\n  //                   drawOnChartArea: false,\n  //                 },\n  //               },\n  //               y: {\n  //                 ticks: {\n  //                   beginAtZero: true,\n  //                   maxTicksLimit: 5,\n  //                   stepSize: Math.ceil(250 / 5),\n  //                   max: 250,\n  //                 },\n  //               },\n  //             },\n  //             elements: {\n  //               line: {\n  //                 tension: 0.4,\n  //               },\n  //               point: {\n  //                 radius: 0,\n  //                 hitRadius: 10,\n  //                 hoverRadius: 4,\n  //                 hoverBorderWidth: 3,\n  //               },\n  //             },\n  //           }}\n  //         />\n  //       </CCardBody>\n  //       <CCardFooter>\n  //         <CRow xs={{ cols: 1 }} md={{ cols: 5 }} className=\"text-center\">\n  //           {progressExample.map((item, index) => (\n  //             <CCol className=\"mb-sm-2 mb-0\" key={index}>\n  //               <div className=\"text-medium-emphasis\">{item.title}</div>\n  //               <strong>\n  //                 {item.value} ({item.percent}%)\n  //               </strong>\n  //               <CProgress thin className=\"mt-2\" color={item.color} value={item.percent} />\n  //             </CCol>\n  //           ))}\n  //         </CRow>\n  //       </CCardFooter>\n  //     </CCard>\n\n  //     <WidgetsBrand withCharts /> */}\n  //     {/* <CRow>\n  //       <CCol xs>\n  //         <CCard className=\"mb-4\">\n  //           <CCardHeader>Traffic {' & '} Sales</CCardHeader>\n  //           <CCardBody>\n  //             <CRow>\n  //               <CCol xs={12} md={6} xl={6}>\n  //                 <CRow>\n  //                   <CCol sm={6}>\n  //                     <div className=\"border-start border-start-4 border-start-info py-1 px-3\">\n  //                       <div className=\"text-medium-emphasis small\">New Clients</div>\n  //                       <div className=\"fs-5 fw-semibold\">9,123</div>\n  //                     </div>\n  //                   </CCol>\n  //                   <CCol sm={6}>\n  //                     <div className=\"border-start border-start-4 border-start-danger py-1 px-3 mb-3\">\n  //                       <div className=\"text-medium-emphasis small\">Recurring Clients</div>\n  //                       <div className=\"fs-5 fw-semibold\">22,643</div>\n  //                     </div>\n  //                   </CCol>\n  //                 </CRow>\n\n  //                 <hr className=\"mt-0\" />\n  //                 {progressGroupExample1.map((item, index) => (\n  //                   <div className=\"progress-group mb-4\" key={index}>\n  //                     <div className=\"progress-group-prepend\">\n  //                       <span className=\"text-medium-emphasis small\">{item.title}</span>\n  //                     </div>\n  //                     <div className=\"progress-group-bars\">\n  //                       <CProgress thin color=\"info\" value={item.value1} />\n  //                       <CProgress thin color=\"danger\" value={item.value2} />\n  //                     </div>\n  //                   </div>\n  //                 ))}\n  //               </CCol>\n\n  //               <CCol xs={12} md={6} xl={6}>\n  //                 <CRow>\n  //                   <CCol sm={6}>\n  //                     <div className=\"border-start border-start-4 border-start-warning py-1 px-3 mb-3\">\n  //                       <div className=\"text-medium-emphasis small\">Pageviews</div>\n  //                       <div className=\"fs-5 fw-semibold\">78,623</div>\n  //                     </div>\n  //                   </CCol>\n  //                   <CCol sm={6}>\n  //                     <div className=\"border-start border-start-4 border-start-success py-1 px-3 mb-3\">\n  //                       <div className=\"text-medium-emphasis small\">Organic</div>\n  //                       <div className=\"fs-5 fw-semibold\">49,123</div>\n  //                     </div>\n  //                   </CCol>\n  //                 </CRow>\n\n  //                 <hr className=\"mt-0\" />\n\n  //                 {progressGroupExample2.map((item, index) => (\n  //                   <div className=\"progress-group mb-4\" key={index}>\n  //                     <div className=\"progress-group-header\">\n  //                       <CIcon className=\"me-2\" icon={item.icon} size=\"lg\" />\n  //                       <span>{item.title}</span>\n  //                       <span className=\"ms-auto fw-semibold\">{item.value}%</span>\n  //                     </div>\n  //                     <div className=\"progress-group-bars\">\n  //                       <CProgress thin color=\"warning\" value={item.value} />\n  //                     </div>\n  //                   </div>\n  //                 ))}\n\n  //                 <div className=\"mb-5\"></div>\n\n  //                 {progressGroupExample3.map((item, index) => (\n  //                   <div className=\"progress-group\" key={index}>\n  //                     <div className=\"progress-group-header\">\n  //                       <CIcon className=\"me-2\" icon={item.icon} size=\"lg\" />\n  //                       <span>{item.title}</span>\n  //                       <span className=\"ms-auto fw-semibold\">\n  //                         {item.value}{' '}\n  //                         <span className=\"text-medium-emphasis small\">({item.percent}%)</span>\n  //                       </span>\n  //                     </div>\n  //                     <div className=\"progress-group-bars\">\n  //                       <CProgress thin color=\"success\" value={item.percent} />\n  //                     </div>\n  //                   </div>\n  //                 ))}\n  //               </CCol>\n  //             </CRow>\n\n  //             <br />\n\n  //             <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n  //               <CTableHead color=\"light\">\n  //                 <CTableRow>\n  //                   <CTableHeaderCell className=\"text-center\">\n  //                     <CIcon icon={cilPeople} />\n  //                   </CTableHeaderCell>\n  //                   <CTableHeaderCell>User</CTableHeaderCell>\n  //                   <CTableHeaderCell className=\"text-center\">Country</CTableHeaderCell>\n  //                   <CTableHeaderCell>Usage</CTableHeaderCell>\n  //                   <CTableHeaderCell className=\"text-center\">Payment Method</CTableHeaderCell>\n  //                   <CTableHeaderCell>Activity</CTableHeaderCell>\n  //                 </CTableRow>\n  //               </CTableHead>\n  //               <CTableBody>\n  //                 {tableExample.map((item, index) => (\n  //                   <CTableRow v-for=\"item in tableItems\" key={index}>\n  //                     <CTableDataCell className=\"text-center\">\n  //                       <CAvatar size=\"md\" src={item.avatar.src} status={item.avatar.status} />\n  //                     </CTableDataCell>\n  //                     <CTableDataCell>\n  //                       <div>{item.user.name}</div>\n  //                       <div className=\"small text-medium-emphasis\">\n  //                         <span>{item.user.new ? 'New' : 'Recurring'}</span> | Registered:{' '}\n  //                         {item.user.registered}\n  //                       </div>\n  //                     </CTableDataCell>\n  //                     <CTableDataCell className=\"text-center\">\n  //                       <CIcon size=\"xl\" icon={item.country.flag} title={item.country.name} />\n  //                     </CTableDataCell>\n  //                     <CTableDataCell>\n  //                       <div className=\"clearfix\">\n  //                         <div className=\"float-start\">\n  //                           <strong>{item.usage.value}%</strong>\n  //                         </div>\n  //                         <div className=\"float-end\">\n  //                           <small className=\"text-medium-emphasis\">{item.usage.period}</small>\n  //                         </div>\n  //                       </div>\n  //                       <CProgress thin color={item.usage.color} value={item.usage.value} />\n  //                     </CTableDataCell>\n  //                     <CTableDataCell className=\"text-center\">\n  //                       <CIcon size=\"xl\" icon={item.payment.icon} />\n  //                     </CTableDataCell>\n  //                     <CTableDataCell>\n  //                       <div className=\"small text-medium-emphasis\">Last login</div>\n  //                       <strong>{item.activity}</strong>\n  //                     </CTableDataCell>\n  //                   </CTableRow>\n  //                 ))}\n  //               </CTableBody>\n  //             </CTable>\n  //           </CCardBody>\n  //         </CCard>\n  //       </CCol>\n  //     </CRow> */}\n  //   </>\n  // )\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <div className=\"mb-5 mt-2\" style={{ textAlign: 'center' }}>\n            <h2>Welcome, {patientRecord?.name}</h2>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <WidgetsDropdown\n            numberOfPatient={numberOfPatient}\n            appointmentDataList={appointmentDataList}\n            numberOfTodaysAppointment={numberOfTodaysAppointment}\n          />\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-md-2\">\n          <div style={{ fontFamily: 'sans-serif', marginTop: '1rem' }}>\n            <h5>Appointments: {filteredAppointmentNumber || 0}</h5>\n          </div>\n        </div>\n        <div className=\"col-md-8\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <LocalizationProvider dateAdapter={AdapterDayjs}>\n                <DemoContainer components={['DateTimePicker']}>\n                  <DateTimePicker\n                    label=\"From\"\n                    value={startingDate}\n                    onChange={handleStartingDateChange}\n                    inputFormat=\"YYYY-MM-DD\"\n                    ampm={false}\n                    ampmInClock={false}\n                    views={['year', 'month', 'day']}\n                  />\n                </DemoContainer>\n              </LocalizationProvider>\n            </div>\n            <div className=\"col-md-6\">\n              <LocalizationProvider dateAdapter={AdapterDayjs}>\n                <DemoContainer components={['DateTimePicker']}>\n                  <DateTimePicker\n                    label=\"To\"\n                    value={endDate}\n                    onChange={handleEndDateChange}\n                    inputFormat=\"YYYY-MM-DD\"\n                    ampm={false}\n                    ampmInClock={false}\n                    views={['year', 'month', 'day']}\n                  />\n                </DemoContainer>\n              </LocalizationProvider>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"col-md-2 d-flex mt-3\">\n          <button className=\"btn btn-primary me-2\" onClick={dateSubmit}>\n            Search\n          </button>\n          <button className=\"btn btn-primary\" onClick={dateReset}>\n            Reset\n          </button>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <div className=\"mt-2 table-responsive\">\n            <Table\n              rowSelection={{\n                type: selectionType,\n                ...rowSelection,\n              }}\n              columns={columns}\n              dataSource={filteredAppointment}\n              pagination={false}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <div className=\"d-flex justify-content-end mt-2\">\n            <Stack spacing={2}>\n              <Pagination count={pageCount} page={page} onChange={handleChange} />\n            </Stack>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Dashboard\n","import React from 'react'\nimport {\n  CRow,\n  CCol,\n  CDropdown,\n  CDropdownMenu,\n  CDropdownItem,\n  CDropdownToggle,\n  CWidgetStatsA,\n} from '@coreui/react'\nimport { getStyle } from '@coreui/utils'\nimport { CChartBar, CChartLine } from '@coreui/react-chartjs'\nimport CIcon from '@coreui/icons-react'\nimport { cilArrowBottom, cilArrowTop, cilOptions } from '@coreui/icons'\nimport PropTypes from 'prop-types'\nimport { useNavigate } from 'react-router-dom'\n\nconst WidgetsDropdown = ({ numberOfPatient, appointmentDataList, numberOfTodaysAppointment }) => {\n  WidgetsDropdown.propTypes = {\n    numberOfPatient: PropTypes.any.isRequired,\n    appointmentDataList: PropTypes.any.isRequired,\n    numberOfTodaysAppointment: PropTypes.any.isRequired,\n  }\n  const navigate = useNavigate()\n  // console.log(numberOfPatient)\n\n  const nevigateToMySchedules = () => {\n    navigate('/calendar')\n  }\n  return (\n    <CRow>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"primary\"\n          value={\n            <>\n              Patient{' '}\n              <div className=\"fs-6 fw-normal\">Number of Patients : {numberOfPatient || 0}</div>\n            </>\n          }\n          onClick={() => navigate('/patientPage')}\n          style={{ cursor: 'pointer' }}\n          // title=\"Users\"\n          // action={\n          //   <CDropdown alignment=\"end\">\n          //     <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n          //       <CIcon icon={cilOptions} className=\"text-high-emphasis-inverse\" />\n          //     </CDropdownToggle>\n          //     <CDropdownMenu>\n          //       <CDropdownItem>Action</CDropdownItem>\n          //       <CDropdownItem>Another action</CDropdownItem>\n          //       <CDropdownItem>Something else here...</CDropdownItem>\n          //       <CDropdownItem disabled>Disabled action</CDropdownItem>\n          //     </CDropdownMenu>\n          //   </CDropdown>\n          // }\n          chart={\n            <CChartLine\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              // data={{\n              //   labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n              //   datasets: [\n              //     {\n              //       label: 'My First dataset',\n              //       backgroundColor: 'transparent',\n              //       borderColor: 'rgba(255,255,255,.55)',\n              //       pointBackgroundColor: getStyle('--cui-primary'),\n              //       data: [65, 59, 84, 84, 51, 55, 40],\n              //     },\n              //   ],\n              // }}\n              // options={{\n              //   plugins: {\n              //     legend: {\n              //       display: false,\n              //     },\n              //   },\n              //   maintainAspectRatio: false,\n              //   scales: {\n              //     x: {\n              //       grid: {\n              //         display: false,\n              //         drawBorder: false,\n              //       },\n              //       ticks: {\n              //         display: false,\n              //       },\n              //     },\n              //     y: {\n              //       min: 30,\n              //       max: 89,\n              //       display: false,\n              //       grid: {\n              //         display: false,\n              //       },\n              //       ticks: {\n              //         display: false,\n              //       },\n              //     },\n              //   },\n              //   elements: {\n              //     line: {\n              //       borderWidth: 1,\n              //       tension: 0.4,\n              //     },\n              //     point: {\n              //       radius: 4,\n              //       hitRadius: 10,\n              //       hoverRadius: 4,\n              //     },\n              //   },\n              // }}\n            />\n          }\n        />\n      </CCol>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          style={{ cursor: 'pointer' }}\n          onClick={() => nevigateToMySchedules()}\n          className=\"mb-4\"\n          color=\"primary\"\n          value={\n            <>\n              {'Appointments'}{' '}\n              <div className=\"fs-6 fw-normal\">\n                Today&apos;s Appointment : {numberOfTodaysAppointment || 0}\n              </div>\n            </>\n          }\n          // title=\"Users\"\n          // action={\n          //   <CDropdown alignment=\"end\">\n          //     <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n          //       <CIcon icon={cilOptions} className=\"text-high-emphasis-inverse\" />\n          //     </CDropdownToggle>\n          //     <CDropdownMenu>\n          //       <CDropdownItem>Action</CDropdownItem>\n          //       <CDropdownItem>Another action</CDropdownItem>\n          //       <CDropdownItem>Something else here...</CDropdownItem>\n          //       <CDropdownItem disabled>Disabled action</CDropdownItem>\n          //     </CDropdownMenu>\n          //   </CDropdown>\n          // }\n          chart={\n            <CChartLine\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              // data={{\n              //   labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n              //   datasets: [\n              //     {\n              //       label: 'My First dataset',\n              //       backgroundColor: 'transparent',\n              //       borderColor: 'rgba(255,255,255,.55)',\n              //       pointBackgroundColor: getStyle('--cui-primary'),\n              //       data: [65, 59, 84, 84, 51, 55, 40],\n              //     },\n              //   ],\n              // }}\n              // options={{\n              //   plugins: {\n              //     legend: {\n              //       display: false,\n              //     },\n              //   },\n              //   maintainAspectRatio: false,\n              //   scales: {\n              //     x: {\n              //       grid: {\n              //         display: false,\n              //         drawBorder: false,\n              //       },\n              //       ticks: {\n              //         display: false,\n              //       },\n              //     },\n              //     y: {\n              //       min: 30,\n              //       max: 89,\n              //       display: false,\n              //       grid: {\n              //         display: false,\n              //       },\n              //       ticks: {\n              //         display: false,\n              //       },\n              //     },\n              //   },\n              //   elements: {\n              //     line: {\n              //       borderWidth: 1,\n              //       tension: 0.4,\n              //     },\n              //     point: {\n              //       radius: 4,\n              //       hitRadius: 10,\n              //       hoverRadius: 4,\n              //     },\n              //   },\n              // }}\n            />\n          }\n        />\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default WidgetsDropdown\n"],"names":["Dashboard","API_URL","process","patientData","localStorage","getItem","patientRecord","JSON","parse","page","setPage","React","pageCount","setPageCount","useState","numberOfPatient","setNumberOfPatient","apointmentList","setAppointmentList","numberOfTodaysAppointment","setNumberOfTodaysAppointment","useEffect","async","_response$data","_response$data2","_response$data3","_res$data","_res$data$data","response","getFetch","concat","console","log","data","count","date","Date","res","length","error","fetchData","filteredAppointment","setFilteredAppointment","filteredAppointmentNumber","setFilteredAppointmentNumber","appointmentDataList","setAppointmentDataList","todayDate","dayjs","startingDate","setStartingDate","endDate","setEndDate","updateState","setUpdateState","dateSubmit","_res$data2","_res$data3","_res$data4","_res$data5","isBefore","alert","date1","success","getFilteredDate","today","todayYear","getFullYear","todayMonth","getMonth","todayDay","getDate","filteredList","filter","appointment","element","nextApointmentDate","givenYear","givenMonth","givenDay","selectionType","setSelectionType","navigate","useNavigate","columns","title","dataIndex","render","text","_jsx","children","sorter","a","b","name","localeCompare","age","sex","toLocaleString","year","month","day","hour","minute","hour12","replace","className","onClick","e","state","rowSelection","onChange","selectedRowKeys","selectedRows","getCheckboxProps","record","disabled","_jsxs","style","textAlign","WidgetsDropdown","fontFamily","marginTop","LocalizationProvider","dateAdapter","AdapterDayjs","DemoContainer","components","DateTimePicker","label","value","inputFormat","ampm","ampmInClock","views","dateReset","Table","type","dataSource","pagination","Stack","spacing","Pagination","handleChange","event","_ref","CRow","CCol","sm","lg","CWidgetStatsA","color","_Fragment","cursor","chart","CChartLine","height"],"sourceRoot":""}