{"version":3,"file":"static/js/3969.85ff9494.chunk.js","mappings":"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","sources":["api/Api.js","constant.js","views/pages/login/Login.js"],"sourcesContent":["import axios from 'axios'\nexport const getFetch = async (url) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'get',\n      url: `${url}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      // withCredentials: true,\n    })\n    // if (response.status === 200) {\n    return response\n    // }\n  } catch (error) {\n    console.log(error)\n    return error\n  }\n}\nexport const getFetchByLimit = async (url, limit, page) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'GET',\n      url: `${url}/${limit}/${page}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      withCredentials: true,\n    })\n    if (response.status === 200) {\n      return await response?.data\n    }\n  } catch (error) {\n    console.log(error)\n    return error\n  }\n}\nexport const getOneFetch = async (url, id) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'GET',\n      url: `${url}/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      withCredentials: true,\n    })\n    if (response?.status === 200) {\n      return await response?.data\n    }\n  } catch (error) {\n    console.log(error)\n    if (error?.response?.status === 401) {\n      return 401\n    }\n    return error\n  }\n}\nexport const postFetch = async (url, data) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'post',\n      url,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data; boundary=<calculated when request is sent>',\n      },\n      data,\n      withCredentials: true,\n    })\n    if (response) {\n      return response\n    }\n  } catch (error) {\n    return error\n  }\n}\nexport const postFetchUser = async (url, data) => {\n  try {\n    // const token = localStorage.getItem(\"token\")\n    const response = await axios({\n      method: 'post',\n      url,\n      headers: {\n        // Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data',\n      },\n      data,\n      //   withCredentials: true,\n    })\n    if (response) {\n      return response\n    }\n  } catch (error) {\n    return error\n  }\n}\n\nexport const postFetchContent = async (url, data) => {\n  try {\n    const response = await axios.post(url, data, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    // if (response.status >= 200 && response.status < 300) {\n    return response.data\n    // } else {\n    //   throw new Error(`Request failed with status ${response.status}`)\n    // }\n  } catch (error) {\n    console.error('Error in postFetchContent:', error)\n    throw error\n  }\n}\n\nexport const patchFetch = async (url, id, data) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'patch',\n      url: `${url}/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      data,\n      withCredentials: true,\n    })\n    if (response?.status === 200) {\n      return response\n    }\n  } catch (error) {\n    if (error?.response?.status === 401) {\n      return 401\n    } else {\n      return error?.response\n    }\n  }\n}\nexport const putFetch = async (url, data) => {\n  try {\n    // const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'put',\n      url: `${url}`,\n      headers: {\n        // Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data; boundary=<calculated when request is sent>',\n      },\n      data,\n      // withCredentials: true,\n    })\n    if (response.status === 200) {\n      return response\n    }\n  } catch (error) {\n    if (error) {\n      return 401\n    } else {\n      return error.response\n    }\n  }\n}\nexport const putFetchById = async (url) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'put',\n      url: `${url}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      withCredentials: true,\n    })\n    if (response.status === 200) {\n      return response\n    }\n  } catch (error) {\n    if (error) {\n      return 401\n    } else {\n      return error.response\n    }\n  }\n}\nexport const putFetchData = async (url, data) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'put',\n      url: `${url}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      data,\n      // withCredentials: true,\n    })\n    if (response) {\n      return response\n    }\n  } catch (error) {\n    if (error?.response?.status === 401) {\n      return 401\n    } else {\n      return error.response\n    }\n  }\n}\nexport const deleteFetch = async (url, id) => {\n  try {\n    // const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'delete',\n      url: `${url}/${id}`,\n      headers: {\n        // Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      // withCredentials: true,\n    })\n    if (response.status === 200) {\n      return response\n    }\n  } catch (error) {\n    if (error?.response?.status === 401) {\n      return 401\n    }\n  }\n}\n\nexport const postFetchData = async (url, data) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'post',\n      url: `${url}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      data,\n      // withCredentials: true,\n    })\n    if (response) {\n      return response?.data\n    }\n  } catch (error) {\n    if (error?.response?.status === 401) {\n      return 401\n    } else {\n      return error\n    }\n  }\n}\n","// export const API_URL = 'http://localhost:8090'\nexport const API_URL = 'http://18.204.141.1:8090'\n","import React, { useState } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilLockLocked, cilUser } from '@coreui/icons'\nimport { postFetchData } from 'src/api/Api'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { faL } from '@fortawesome/free-solid-svg-icons'\nimport { API_URL } from 'src/constant'\nconst Login = () => {\n  const navigate = useNavigate()\n  const [data, setData] = useState({\n    email: '',\n    password: '',\n  })\n\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    setData({ ...data, [name]: value })\n  }\n\n  const handleSubmit = async (e) => {\n    try {\n      e.preventDefault()\n      const dataa = await postFetchData(`${API_URL}/api/user/login`, data)\n      console.log('data', dataa)\n      if (dataa.success == true) {\n        toast.success('Login successfully')\n\n        localStorage.setItem('token', dataa.token)\n        localStorage.setItem('patientRecord', JSON.stringify(dataa?.user))\n        setTimeout(() => {\n          window.location.reload()\n        }, 1000)\n        // window.location.reload()\n      }\n\n      if (data.success === false) {\n        toast.warning('Invalid Credentials')\n      }\n      // console.log(data)\n    } catch (error) {\n      toast.warning('Something went wrong')\n      console.log(error)\n    }\n  }\n  return (\n    <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md={5}>\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm>\n                    <h2>Login</h2>\n                    <p className=\"text-medium-emphasis\">Sign In to your account</p>\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupText>\n                        <CIcon icon={cilUser} />\n                      </CInputGroupText>\n                      <CFormInput\n                        placeholder=\"Email\"\n                        autoComplete=\"email\"\n                        name=\"email\"\n                        value={data.email}\n                        onChange={handleChange}\n                      />\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupText>\n                        <CIcon icon={cilLockLocked} />\n                      </CInputGroupText>\n                      <CFormInput\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        autoComplete=\"current-password\"\n                        name=\"password\"\n                        value={data.password}\n                        onChange={handleChange}\n                      />\n                    </CInputGroup>\n                    <CRow>\n                      <CCol xs={12} style={{ textAlign: 'center' }}>\n                        <CButton color=\"primary\" className=\"px-5\" onClick={handleSubmit}>\n                          Login\n                        </CButton>\n                      </CCol>\n                      {/* <CCol xs={6} className=\"text-right\">\n                        <CButton color=\"link\" className=\"px-0\">\n                          Forgot password?\n                        </CButton>\n                      </CCol> */}\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n              {/* <CCard className=\"text-white bg-primary py-5\" style={{ width: '44%' }}>\n                <CCardBody className=\"text-center\">\n                  <div>\n                    <h2>Sign up</h2>\n                    <p>\n                      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n                      tempor incididunt ut labore et dolore magna aliqua.\n                    </p>\n                    <Link to=\"/register\">\n                      <CButton color=\"primary\" className=\"mt-3\" active tabIndex={-1}>\n                        Register Now!\n                      </CButton>\n                    </Link>\n                  </div>\n                </CCardBody>\n              </CCard> */}\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n      <ToastContainer />\n    </div>\n  )\n}\n\nexport default Login\n"],"names":["getFetch","async","token","localStorage","getItem","axios","method","url","concat","headers","Authorization","error","console","log","putFetchData","data","response","_error$response3","status","postFetchData","_error$response5","API_URL","Login","useNavigate","setData","useState","email","password","handleChange","e","name","value","target","_jsxs","className","children","_jsx","CContainer","CRow","CCol","md","CCardGroup","CCard","CCardBody","CForm","CInputGroup","CInputGroupText","CIcon","icon","cilUser","CFormInput","placeholder","autoComplete","onChange","cilLockLocked","type","xs","style","textAlign","CButton","color","onClick","preventDefault","dataa","success","toast","setItem","JSON","stringify","user","setTimeout","window","location","reload","warning","ToastContainer"],"sourceRoot":""}