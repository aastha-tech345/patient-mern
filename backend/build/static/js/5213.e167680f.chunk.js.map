{"version":3,"file":"static/js/5213.e167680f.chunk.js","mappings":"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","sources":["views/pages/register/Register.js","views/publicItems/ SpinnerOverlay.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilLockLocked, cilUser } from '@coreui/icons'\n\nimport { BiChevronDown } from 'react-icons/bi' // Assuming you have BiChevronDown from react-icons for dropdown icon\nimport { getFetch, postFetchData } from 'src/api/Api'\nimport { useNavigate } from 'react-router-dom'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport SpinnerOverlay from 'src/views/publicItems/ SpinnerOverlay'\nimport { faL, faLaptopHouse } from '@fortawesome/free-solid-svg-icons'\n\nconst Register = () => {\n  const navigate = useNavigate()\n  const API_URL = process.env.REACT_APP_API_URL\n  const [department, setDepartment] = useState([])\n  const [data, setData] = React.useState({\n    name: '',\n    email: '',\n    password: '',\n    department_id: '',\n  })\n  const [loading, setLoading] = useState(false)\n\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    setData({ ...data, [name]: value })\n  }\n\n  const handleSubmit = async (e) => {\n    try {\n      setLoading(true)\n      e.preventDefault()\n      console.log('data', data)\n      const res = await postFetchData(`${API_URL}/api/user/create`, data)\n      console.log('user creation', res?.response?.data?.success)\n\n      if (res?.response?.data?.success === false) {\n        setLoading(false)\n        return toast.warning(res?.response?.data?.message)\n      }\n\n      if (res.success === true) {\n        toast.success('Doctor Created Successfully')\n        setTimeout(() => {\n          setLoading(false)\n          navigate('/')\n        }, 2000)\n      } else {\n        setLoading(false)\n        toast.warning('Something went wrong')\n      }\n    } catch (error) {\n      setLoading(false)\n      console.log(error)\n    }\n  }\n\n  const getAllDepartments = async () => {\n    try {\n      const res = await getFetch(`${API_URL}/api/department/`)\n      console.log('res', res.data.data)\n      setDepartment(res.data.data)\n    } catch (error) {\n      console.log('error')\n    }\n  }\n\n  const nevigateToLogin = () => {\n    navigate('/')\n  }\n\n  useEffect(() => {\n    getAllDepartments()\n  }, [])\n  return (\n    <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\n      {loading ? <SpinnerOverlay message=\"Loading...\" /> : ''}\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md={9} lg={7} xl={6}>\n            <CCard className=\"mx-4\">\n              <CCardBody className=\"p-4\">\n                <CForm>\n                  <h1>Register</h1>\n                  <p className=\"text-medium-emphasis\">Create your account</p>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupText>\n                      <CIcon icon={cilUser} />\n                    </CInputGroupText>\n                    <CFormInput\n                      placeholder=\"Full Name\"\n                      autoComplete=\"username\"\n                      name=\"name\"\n                      value={data.name}\n                      onChange={handleChange}\n                    />\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupText>@</CInputGroupText>\n                    <CFormInput\n                      placeholder=\"Email\"\n                      autoComplete=\"email\"\n                      name=\"email\"\n                      value={data.email}\n                      onChange={handleChange}\n                    />\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupText>\n                      <CIcon icon={cilLockLocked} />\n                    </CInputGroupText>\n                    <CFormInput\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      autoComplete=\"new-password\"\n                      name=\"password\"\n                      value={data.password}\n                      onChange={handleChange}\n                    />\n                  </CInputGroup>\n\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupText>\n                      <BiChevronDown />\n                    </CInputGroupText>\n                    <select\n                      className=\"form-select\"\n                      name=\"department_id\"\n                      value={data.department_id}\n                      onChange={handleChange}\n                    >\n                      <option value=\"\">Select Department</option>\n                      {department?.map((elem) => {\n                        return (\n                          <>\n                            <option value={elem?._id}>{elem?.departmentName}</option>\n                          </>\n                        )\n                      })}\n                    </select>\n                  </CInputGroup>\n                  <div className=\"d-grid\">\n                    <CButton color=\"success\" onClick={handleSubmit}>\n                      Create Account\n                    </CButton>\n                  </div>\n                  <div>\n                    <p style={{ display: 'flex', marginTop: '1rem' }}>\n                      To Loggin Click! &nbsp;\n                      <p style={{ cursor: 'pointer', color: 'blue' }} onClick={nevigateToLogin}>\n                        Signin\n                      </p>\n                    </p>\n                  </div>\n                </CForm>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n      <ToastContainer />\n    </div>\n  )\n}\n\nexport default Register\n","// SpinnerOverlay.js\nimport React from 'react'\nimport { BarLoader } from 'react-spinners'\n\nconst SpinnerOverlay = (loading) => {\n  const message = loading.message\n  return (\n    <div style={overlayStyle(loading)}>\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        <BarLoader loading={loading} color=\"#36D7B7\" />\n        {message ? <p style={{ margin: 'auto' }}>{message}</p> : ''}\n      </div>\n    </div>\n  )\n}\n\nconst overlayStyle = (loading) => ({\n  position: 'fixed',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%',\n  backgroundColor: 'rgba(255, 255, 255, 0.7)',\n  display: loading ? 'flex' : 'none',\n  justifyContent: 'center',\n  alignItems: 'center',\n  zIndex: 9999,\n})\n\nexport default SpinnerOverlay\n"],"names":["Register","navigate","useNavigate","API_URL","process","department","setDepartment","useState","data","setData","React","name","email","password","department_id","loading","setLoading","handleChange","e","value","target","useEffect","async","res","getFetch","concat","console","log","error","getAllDepartments","_jsxs","className","children","_jsx","SpinnerOverlay","message","CContainer","CRow","CCol","md","lg","xl","CCard","CCardBody","CForm","CInputGroup","CInputGroupText","CIcon","icon","cilUser","CFormInput","placeholder","autoComplete","onChange","cilLockLocked","type","BiChevronDown","map","elem","_Fragment","_id","departmentName","CButton","color","onClick","_res$response","_res$response$data","_res$response2","_res$response2$data","preventDefault","postFetchData","_res$response3","_res$response3$data","response","success","toast","warning","setTimeout","style","display","marginTop","cursor","nevigateToLogin","ToastContainer","overlayStyle","position","top","left","width","height","backgroundColor","justifyContent","alignItems","zIndex","flexDirection","BarLoader","margin"],"sourceRoot":""}