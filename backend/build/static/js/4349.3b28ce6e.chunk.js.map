{"version":3,"file":"static/js/4349.3b28ce6e.chunk.js","mappings":"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","sources":["views/pages/patient/PatientShowDetails.jsx","views/pages/patient/PatientAddNewRecord.jsx","views/pages/patient/PatientInfoData.jsx","views/pages/loader/AddPatientLoader.jsx","views/pages/patient/PatientPage.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport axios from 'axios'\nimport CIcon from '@coreui/icons-react'\nimport { cilDataTransferDown } from '@coreui/icons'\nimport { ToastContainer, toast } from 'react-toastify'\nimport SpinnerOverlay from 'src/views/publicItems/ SpinnerOverlay'\n\nconst PatientShowDetails = ({ diagnosis }) => {\n  const [reversedDiagnosis, setReversedDiagnosis] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [requestedFileLoading, setRequestedFileLoading] = useState({})\n  // const [selectedFile, setSelectedFile] = useState(Array(diagnosis?.length).fill(''))\n\n  useEffect(() => {\n    if (diagnosis && Array.isArray(diagnosis)) {\n      const reversed = [...diagnosis].reverse()\n      setReversedDiagnosis(reversed)\n    }\n  }, [diagnosis])\n\n  const showReportHandler = async (filename, index) => {\n    try {\n      setLoading(true)\n\n      const response = await axios.get(\n        `${process.env.REACT_APP_API_URL}/api/user/getPatientReport/${filename}`,\n        {\n          responseType: 'blob',\n        },\n      )\n\n      const blob = new Blob([response.data], { type: response.headers['content-type'] })\n      const blobUrl = URL.createObjectURL(blob)\n      window.open(blobUrl)\n    } catch (error) {\n      setLoading(false)\n      console.error('Error fetching report:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // const handleFileSelect = (e, index) => {\n  //   const { value } = e.target\n  //   const updatedSelectedFile = [...selectedFile]\n  //   updatedSelectedFile[index] = value\n  //   setSelectedFile(updatedSelectedFile)\n  // }\n  const editNameFun = (name) => {\n    if (name) {\n      const fileName = name\n      const parts = fileName.split('_')\n      // Check if the file name contains underscores\n      if (parts.length > 1) {\n        // Exclude the first part of the file name and join the rest with underscores\n        const editedFileName = parts.slice(1).join('_')\n        const actualFileName = editedFileName.split('.')[0]\n        return actualFileName\n      } else {\n        // If there are no underscores or only one part, return the original file name\n        return fileName\n      }\n    } else {\n      // If the file name is undefined, return an empty string\n      return ''\n    }\n  }\n  // console.log('guarva', reversedDiagnosis)\n\n  const [hoveredFile, setHoveredFile] = useState(null)\n\n  const handleMouseEnter = (fileName) => {\n    const fileNamee = editNameFun(fileName)\n    setHoveredFile(fileNamee)\n  }\n\n  const handleMouseLeave = () => {\n    setHoveredFile(null)\n  }\n\n  return (\n    <div style={{ maxHeight: '300px', marginTop: '20px' }}>\n      {reversedDiagnosis?.map((elem, index) => {\n        const date = new Date(elem.date)\n        const formattedDate = date\n          .toLocaleDateString('en-IN', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: true,\n          })\n          .replace(/\\//g, '/')\n\n        return (\n          <div key={index}>\n            <div className=\"row\">\n              <div style={{ margin: '1rem auto 1rem 1rem', overflow: 'auto !important' }}>\n                <h5>Diagnose Date: {formattedDate}</h5>\n\n                <table\n                  className=\"table\"\n                  style={{\n                    width: '90%',\n                    border: '1px solid',\n                    fontFamily: 'ui-rounded',\n                    borderRadius: '10px',\n                  }}\n                >\n                  <colgroup>\n                    <col style={{ width: '20%' }} />\n                    <col style={{ width: '20%' }} />\n                    <col style={{ width: '20%' }} />\n                    <col style={{ width: '20%' }} />\n                    <col style={{ width: '20%' }} />\n                  </colgroup>\n                  <thead>\n                    <tr>\n                      <th scope=\"col\" style={{ background: '#FBF295' }}>\n                        Problems\n                      </th>\n                      <th scope=\"col\" style={{ background: '#FBF295' }}>\n                        Test\n                      </th>\n                      <th scope=\"col\" style={{ background: '#FBF295' }}>\n                        Test value\n                      </th>\n                      <th scope=\"col\" style={{ background: '#FBF295' }}>\n                        Scale\n                      </th>\n                      <th scope=\"col\" style={{ background: '#FBF295' }}>\n                        Scale value\n                      </th>\n                    </tr>\n                  </thead>\n                  {elem?.diagnosData?.map((element, innerIndex) => {\n                    const { problem, scale, test, testInput, value } = element\n\n                    return (\n                      <tbody key={innerIndex}>\n                        {loading && <SpinnerOverlay message=\"loading\" />}\n                        <tr>\n                          <td style={{ fontWeight: 'bolder' }}>{problem}</td>\n                          <td style={{ fontWeight: 'bolder' }}>{test === '' ? '-' : test}</td>\n                          <td style={{ fontWeight: 'bolder' }}>\n                            {test === '' ? (\n                              '-'\n                            ) : testInput?.text ? (\n                              testInput.text\n                            ) : (\n                              <div style={{ display: 'flex' }}>\n                                {testInput?.files?.map((file, fileIndex) => (\n                                  <div\n                                    key={fileIndex}\n                                    value={file.fileName}\n                                    style={{\n                                      display: 'flex',\n                                      alignItems: 'center',\n                                      marginRight: '10px',\n                                    }}\n                                    onMouseEnter={() => handleMouseEnter(file.fileName)}\n                                    onMouseLeave={() => handleMouseLeave()}\n                                    onClick={() => showReportHandler(file?.fileName, fileIndex)}\n                                  >\n                                    <button\n                                      type=\"button\"\n                                      className=\"btn btn-sm btn-primary\" // Decreased size and changed color to blue\n                                      data-toggle=\"popover\"\n                                      title={hoveredFile}\n                                      style={{ margin: '0' }}\n                                    >\n                                      <CIcon icon={cilDataTransferDown} />\n                                    </button>\n                                  </div>\n                                ))}\n                              </div>\n                              // <div style={{ display: 'flex' }}>\n                              //   <select\n                              //     className=\"form-select\"\n                              //     value={selectedFile?.[innerIndex] || ''}\n                              //     onChange={(e) => handleFileSelect(e, innerIndex)}\n                              //     disabled={requestedFileLoading?.[innerIndex]}\n                              //     style={{ width: '70%' }}\n                              //   >\n                              //     <option value=\"\">Select file</option>\n                              //     {testInput?.files?.map((file, fileIndex) => (\n                              //       <option key={fileIndex} value={file.fileName}>\n                              //         {editNameFun(file.fileName)}\n                              //       </option>\n                              //     ))}\n                              //   </select>\n                              //   <button\n                              //     className=\"btn btn-light mx-2\"\n                              //     onClick={() => {\n                              //       if (selectedFile?.[innerIndex]) {\n                              //         showReportHandler(selectedFile[innerIndex], innerIndex)\n                              //       } else {\n                              //         toast.warning('Please select a file to download', {\n                              //           autoClose: 700,\n                              //         })\n                              //       }\n                              //     }}\n                              //     disabled={requestedFileLoading?.[innerIndex]}\n                              //   >\n                              //     {requestedFileLoading?.[innerIndex] ? (\n                              //       '...'\n                              //     ) : (\n                              //       <CIcon icon={cilArrowCircleRight} />\n                              //     )}\n                              //   </button>\n                              // </div>\n                            )}\n                          </td>\n                          {console.log('Guarav', testInput)}\n                          <td style={{ fontWeight: 'bolder' }}>{scale === '' ? '-' : scale}</td>\n                          <td style={{ fontWeight: 'bolder' }}>{value === '' ? '-' : value}</td>\n                        </tr>\n                      </tbody>\n                    )\n                  })}\n                </table>\n\n                <div className=\"row\">\n                  <div style={{ margin: '1rem auto 1rem 1rem' }}>\n                    <div className=\"row\" style={{ marginTop: '1rem' }}>\n                      <div className=\"col-md-2 d-flex align-items-center\">\n                        <h5>Notes:</h5>\n                      </div>\n                      <div className=\"col-md-10 d-flex align-items-center\">\n                        <div className=\"card\" style={{ width: '87%', padding: '1rem 2rem' }}>\n                          <p style={{ margin: '0' }}>{elem.desc === '' ? '-' : elem.desc}</p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <hr />\n            </div>\n          </div>\n        )\n      })}\n      <ToastContainer />\n    </div>\n  )\n}\n\nPatientShowDetails.propTypes = {\n  diagnosis: PropTypes.array.isRequired,\n}\n\nexport default PatientShowDetails\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { getFetch, postFetchFile, putFetchData } from 'src/api/Api'\nimport { DemoContainer } from '@mui/x-date-pickers/internals/demo'\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider'\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport SpinnerOverlay from 'src/views/publicItems/ SpinnerOverlay'\n// import { API_URL } from 'src/constant'\n\nconst PatientAddNewRecord = ({\n  _id,\n  getSearchByPatient,\n  setIsAddNewDiagnosis,\n  setIsDetailed,\n  diagnosisProp,\n}) => {\n  let API_URL = process.env.REACT_APP_API_URL\n  let patientData = localStorage.getItem('patientRecord')\n  let patientRecord = JSON.parse(patientData)\n  PatientAddNewRecord.propTypes = {\n    _id: PropTypes.string.isRequired,\n    getSearchByPatient: PropTypes.string.isRequired,\n    setIsAddNewDiagnosis: PropTypes.string.isRequired,\n    setIsDetailed: PropTypes.string.isRequired,\n    diagnosisProp: PropTypes.string.isRequired,\n  }\n  const [inputs, setInputs] = useState([\n    { problem: '', test: '', testInput: { files: '', text: '' }, scale: '', value: '' },\n  ])\n\n  const [lastDiagnosis, setLastDiagnosis] = useState('')\n\n  useEffect(() => {\n    const lastRecords = diagnosisProp[diagnosisProp.length - 1]\n    const lastDiagnosis = lastRecords?.diagnosData[lastRecords?.diagnosData.length - 1]\n    // setLastDiagnosis(lastDiagnosis)\n    setInputs([\n      {\n        problem: lastDiagnosis.problem || '',\n        test: '',\n        testInput: { files: '', text: '' },\n        scale: '',\n        value: '',\n      },\n    ])\n  }, [])\n  // console.log('data', diagnosisProp)\n  // console.log('lastdata', diagnosisProp[diagnosisProp.length - 1])\n  // console.log('record', lastDiagnosis)\n\n  const [startingDate, setStartingDate] = React.useState(null)\n  const [patientById, setPatientById] = useState({})\n  const [desc, setDesc] = useState('')\n  const [formData, setFormData] = useState({\n    diagnosis: [],\n    desc: '',\n  })\n  const [diagnosis, setDiagnosis] = useState([])\n  let [fileUploadingSpinner, setfileUploadingSpinner] = useState(false)\n  const [problems, setProblems] = useState([])\n  const [tests, setTests] = useState([])\n  const [scales, setScales] = useState([])\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    fetchProblems()\n  }, [])\n\n  const fetchProblems = async () => {\n    try {\n      const problemsResponse = await getFetch(\n        `${API_URL}/api/problem/${patientRecord?.department_id?._id}`,\n      )\n      const problemsData = problemsResponse?.data?.data[0]\n      if (problemsData) {\n        const problemFilter = problemsData.problemName\n          .filter((item) => item.type === 'problem')\n          .map((problem) => problem.name)\n        const scaleFilter = problemsData.problemName\n          .filter((item) => item.type === 'scale')\n          .map((scale) => scale.name)\n        const testFilter = problemsData.problemName\n          .filter((item) => item.type === 'test')\n          .map(({ name, inputType }) => ({ name: name, inputType }))\n        setTests(testFilter)\n        setScales(scaleFilter)\n        setProblems(problemFilter)\n      }\n    } catch (error) {\n      console.error('Error fetching problems:', error)\n    }\n  }\n\n  const handleStartingDateChange = (date) => {\n    setStartingDate(date)\n  }\n\n  const getPatientById = async () => {\n    try {\n      const data = await getFetch(`${API_URL}/api/patient/${_id}`)\n      setPatientById(data.data.data)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n\n    if (inputs.length === 1 && inputs[0].problem === '') {\n      return toast.warning('Please select at least one Chief complaint')\n    }\n\n    for (const data of inputs) {\n      if (data?.test !== '' && data?.testInput === '') {\n        toast.warning('Please give input for selected test')\n        return // Stop further execution\n      }\n      if (data?.scale !== '' && data?.value === '') {\n        toast.warning('Please give input for selected scale')\n        return // Stop further execution\n      }\n      console.log('data', data)\n    }\n    // toast.warning('Uploading Files and Reports')z\n    setfileUploadingSpinner(true)\n    try {\n      await Promise.all(\n        inputs.map(async (data, index) => {\n          if (data.testInput.files) {\n            const files = data.testInput.files\n            if (files.length > 0) {\n              const formData = new FormData()\n              files.forEach((file) => {\n                // Check if the file type is allowed\n                const allowedFileTypes = ['image/jpeg', 'image/png', 'application/pdf']\n                if (allowedFileTypes.includes(file.type)) {\n                  formData.append('files', file) // Append each allowed file to the FormData\n                } else {\n                  console.warn('File type not allowed:', file.type)\n                }\n              })\n              if (formData.has('files')) {\n                const response = await postFetchFile(\n                  `${API_URL}/api/user/uploadPatientReport`,\n                  formData,\n                )\n                if (response) {\n                  setfileUploadingSpinner(false)\n                  inputs[index].testInput.files = response.filesInfo\n                }\n              } else {\n                console.warn('No valid files to upload')\n              }\n            }\n          } else {\n            inputs[index].testInput.files = null\n          }\n        }),\n      )\n    } catch (error) {\n      setfileUploadingSpinner(false)\n      console.error('Error uploading files:', error)\n      return\n    }\n\n    // console.log('guarav', inputs)\n    try {\n      setLoading(true)\n      const updatedFormData = {\n        ...formData,\n        diagnosis: [\n          {\n            diagnosData: inputs,\n            date: Date(),\n            desc,\n          },\n        ],\n        nextApointmentDate: startingDate,\n      }\n      // console.log('updatedFormData', updatedFormData)\n\n      const data = await putFetchData(`${API_URL}/api/patient/update/${_id}`, updatedFormData)\n\n      // console.log('Gaurav', data)\n      if (data) {\n        setDiagnosis([])\n        setDesc('')\n        toast.success('Patient Updated Successfully', {\n          autoClose: 1000,\n        })\n        setTimeout(() => {\n          setIsAddNewDiagnosis(false)\n          setIsDetailed(true)\n          setInputs([\n            { problem: '', test: '', testInput: { files: '', text: '' }, scale: '', value: '' },\n          ])\n          setLoading(false)\n        }, 2000)\n        getSearchByPatient()\n        // window.location.reload()\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const handleClose = () => {\n    setIsAddNewDiagnosis(false)\n    setIsDetailed(true)\n  }\n\n  useEffect(() => {\n    if (patientById.desc) {\n      setFormData((prevFormData) => ({\n        ...prevFormData,\n        desc: patientById.desc,\n      }))\n    }\n  }, [patientById])\n\n  useEffect(() => {\n    getPatientById()\n  }, [])\n\n  /// new updates by Gaurav 28 march 2024 for updating the diagnoses data and formate to add problems tests and scales\n\n  let [removeAndAddInput, setremoveAndAddInput] = useState(false)\n\n  const handleInputChange = (index, event) => {\n    const { name, value } = event.target\n    const updatedInputs = [...inputs]\n    updatedInputs[index][name] = value\n    setInputs(updatedInputs)\n  }\n\n  const handleFileInputChange = (index, event) => {\n    const { name, files } = event.target\n    const allowedFileTypes = ['image/jpeg', 'image/png', 'application/pdf']\n    const maxFiles = 3 // Maximum number of files allowed\n\n    // Check if the number of selected files exceeds the limit\n    if (files.length > maxFiles) {\n      event.target.value = '' // Clear the file input\n      toast.warning('You can only upload up to 3 files', { autoClose: 1500 })\n      return\n    }\n\n    const updatedInputs = [...inputs]\n\n    // Convert FileList to array and filter out files that exceed the size limit or are not of allowed types\n    const filesArray = Array.from(files).filter((file) => {\n      if (file.size > 31457280) {\n        toast.warning('File size should be less than 30 MB', { autoClose: 1500 })\n        return false\n      }\n      if (!allowedFileTypes.includes(file.type)) {\n        toast.warning('Only images and PDFs are allowed', { autoClose: 1500 })\n        return false\n      }\n      return true\n    })\n\n    updatedInputs[index][name] = { files: filesArray } // Store the array of files\n    setInputs(updatedInputs)\n  }\n\n  const handleAddInput = () => {\n    setInputs([\n      ...inputs,\n      { problem: '', test: '', testInput: { files: '', text: '' }, scale: '', value: '' },\n    ])\n  }\n\n  const handleRemoveInput = (index) => {\n    const updatedInputs = [...inputs]\n    updatedInputs.splice(index, 1)\n    setInputs(updatedInputs)\n  }\n\n  const handleInputTestText = (index, event) => {\n    const { name, value } = event.target\n    const updatedInputs = [...inputs]\n    updatedInputs[index][name] = { text: value }\n    setInputs(updatedInputs)\n  }\n  useEffect(() => {\n    if (inputs.length > 1) {\n      setremoveAndAddInput(true)\n    } else {\n      setremoveAndAddInput(false)\n    }\n  }, [handleRemoveInput, handleAddInput, handleInputChange])\n\n  return (\n    <>\n      {fileUploadingSpinner && (\n        <SpinnerOverlay loading={fileUploadingSpinner} message=\"Uploading Files\" />\n      )}\n      {loading && <SpinnerOverlay message=\"Adding Diagnosis\" />}\n      <div style={{ margin: '1rem auto 1rem 1rem' }}>\n        <div style={{ margin: '1rem auto 1rem 0' }}>\n          <h4>Diagnosis: ({patientRecord?.department_id?.departmentName})</h4>\n        </div>\n        <form onSubmit={handleSubmit}>\n          <form className=\"mb-3\">\n            {inputs.map((input, index) => (\n              <div key={index} className=\"row mt-1 mb-2\">\n                <div className=\"col-md-2\">\n                  <label>\n                    <select\n                      className=\"form-control \"\n                      style={{ width: '10rem', appearance: 'auto', height: '38px' }}\n                      name=\"problem\"\n                      value={input.problem}\n                      onChange={(event) => handleInputChange(index, event)}\n                    >\n                      <option value=\"\">Chief complaint</option>\n                      {problems.map((problem, problemIndex) => (\n                        <option key={problemIndex} value={problem}>\n                          {problem}\n                        </option>\n                      ))}\n                    </select>\n                  </label>\n                </div>\n                <div className=\"col-md-2\">\n                  <label>\n                    <select\n                      className=\"form-control \"\n                      style={{ width: '10rem', appearance: 'auto', height: '38px' }}\n                      name=\"test\"\n                      value={input.test}\n                      onChange={(event) => handleInputChange(index, event)}\n                    >\n                      <option value=\"\">Select Test</option>\n                      {tests.map((test, testIndex) => (\n                        <option key={testIndex} value={test.name}>\n                          {test.name}\n                        </option>\n                      ))}\n                    </select>\n                  </label>\n                </div>\n                {input.test === '' ? (\n                  <div className=\"col-md-2\">\n                    <label>\n                      <input\n                        className=\"form-control \"\n                        style={{ width: '10rem', appearance: 'auto' }}\n                        placeholder=\"Select a Test\"\n                        type=\"text\"\n                        disabled=\"true\"\n                      />\n                    </label>\n                  </div>\n                ) : (\n                  <div className=\"col-md-2\">\n                    {tests.map((test, testIndex) => {\n                      if (test.name === input.test) {\n                        if (test.inputType === 'text') {\n                          return (\n                            <label key={testIndex}>\n                              <input\n                                className=\"form-control\"\n                                style={{ width: '10rem' }}\n                                placeholder=\"Enter test Value\"\n                                type=\"text\"\n                                name=\"testInput\"\n                                value={input.testInput.text} // Here is the issue\n                                onChange={(event) => handleInputTestText(index, event)}\n                              />\n                            </label>\n                          )\n                        } else if (test.inputType === 'file') {\n                          return (\n                            <label key={testIndex}>\n                              <input\n                                className=\"form-control\"\n                                style={{ width: '10rem' }}\n                                type=\"file\"\n                                multiple\n                                name=\"testInput\"\n                                accept=\"image/jpeg, image/png, application/pdf\"\n                                onChange={(event) => handleFileInputChange(index, event)}\n                              />\n                            </label>\n                          )\n                        }\n                      }\n                      return null\n                    })}\n                  </div>\n                )}\n                <div className=\"col-md-2\">\n                  <label>\n                    <select\n                      className=\"form-control \"\n                      style={{ width: '10rem', appearance: 'auto', height: '38px' }}\n                      name=\"scale\"\n                      value={input.scale}\n                      onChange={(event) => handleInputChange(index, event)}\n                    >\n                      <option value=\"\">Select Scale</option>\n                      {scales.map((scale, scaleIndex) => (\n                        <option key={scaleIndex} value={scale}>\n                          {scale}\n                        </option>\n                      ))}\n                    </select>\n                  </label>\n                </div>\n                <div className=\"col-md-2\">\n                  <label>\n                    <input\n                      className=\"form-control \"\n                      style={{ width: '10rem', appearance: 'auto' }}\n                      placeholder=\"Enter Scale Value\"\n                      type=\"text\"\n                      name=\"value\"\n                      value={input.value}\n                      onChange={(event) => handleInputChange(index, event)}\n                    />\n                  </label>\n                </div>\n                <div className=\"col-md-2 d-flex justify-content-center\">\n                  {removeAndAddInput && (\n                    <button\n                      className=\"btn btn-danger\"\n                      type=\"button\"\n                      onClick={() => handleRemoveInput(index)}\n                    >\n                      Remove\n                    </button>\n                  )}\n                </div>\n              </div>\n            ))}\n            <div className=\"d-flex justify-content-end\">\n              <button className=\"btn btn-primary me-4\" type=\"button\" onClick={handleAddInput}>\n                Add More\n              </button>\n            </div>\n          </form>\n          <div>\n            <textarea\n              rows={4}\n              className=\"form-control col-12\"\n              placeholder=\"Notes (Optional)\"\n              name=\"desc\"\n              value={desc}\n              onChange={(e) => setDesc(e.target.value)}\n            ></textarea>\n          </div>\n\n          <div className=\"d-flex mt-2\">\n            <div className=\"w-auto\">\n              <LocalizationProvider dateAdapter={AdapterDayjs}>\n                <DemoContainer components={['DateTimePicker']}>\n                  <DateTimePicker\n                    label=\"Next Appointment Date\"\n                    value={startingDate}\n                    onChange={handleStartingDateChange}\n                  />\n                </DemoContainer>\n              </LocalizationProvider>\n            </div>\n          </div>\n          <div className=\"text-end\">\n            <button type=\"submit\" className=\"btn btn-primary mt-4\" style={{ width: '10rem' }}>\n              Submit\n            </button>\n            <button\n              type=\"submit\"\n              className=\"btn btn-danger mt-4 ms-2\"\n              style={{ width: '10rem' }}\n              onClick={() => handleClose()}\n            >\n              Close\n            </button>\n          </div>\n        </form>\n        <ToastContainer />\n      </div>\n    </>\n  )\n}\n\nexport default PatientAddNewRecord\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport PatientShowDetails from './PatientShowDetails'\nimport PatientAddNewRecord from './PatientAddNewRecord'\n\nconst PatientInfoData = ({ patientSearch, getSearchByPatient }) => {\n  const [isAddNewDiagnosis, setIsAddNewDiagnosis] = useState(false)\n  const [isDetails, setIsDetailed] = useState(false)\n  const [selectedPatientId, setSelectedPatientId] = useState('')\n  const [addDiagnosisPatientId, setAddDiagnosisPatientId] = useState('')\n\n  const handleToggleDetails = (patientId) => {\n    setSelectedPatientId((prevState) => (prevState === patientId ? '' : patientId))\n    setAddDiagnosisPatientId('')\n    // setIsAddNewDiagnosis(false)\n    setIsDetailed(true)\n  }\n\n  const handleAddDiagnosis = (patientId) => {\n    setAddDiagnosisPatientId(patientId)\n    setSelectedPatientId(patientId)\n    setIsAddNewDiagnosis(true)\n    setIsDetailed(false)\n  }\n\n  return (\n    <div>\n      {patientSearch?.map((patient) => {\n        const { name, crn, phone, age, sex, diagnosis, _id, desc, nextApointmentDate } = patient\n        const isDetailsOpen = selectedPatientId === _id\n        const isAddDiagnosisOpen = addDiagnosisPatientId === _id\n        const inputDate = nextApointmentDate\n        const diagnosisProp = diagnosis\n        const date = new Date(inputDate)\n        const formattedDate = date\n          .toLocaleString('en-IN', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: true,\n          })\n          .replace(/\\//g, '/')\n\n        return (\n          <div key={_id} className=\"row\">\n            <div style={{ marginTop: '2rem' }}>\n              <div className=\"card\" style={{ width: '100%' }}>\n                <div className=\"card-body overflow-auto \">\n                  <h5 className=\"card-title\"> CR No : {crn}</h5>\n                  <h6 className=\"card-subtitle mt-2\">\n                    <h5>Name : {name}</h5>\n                  </h6>\n                  <div style={{ display: 'flex', marginTop: '1rem' }}>\n                    {/* <p className=\"card-text\">CRN No. {crn}</p> */}\n                    <span style={{ display: 'flex' }}>\n                      <h6>Phone No. &nbsp;</h6> <h6 style={{ fontWeight: 'normal' }}>{phone}</h6>\n                    </span>\n                    <span style={{ display: 'flex', marginLeft: '2rem' }}>\n                      <h6>Age. &nbsp;</h6> <h6 style={{ fontWeight: 'normal' }}>{age}</h6>\n                    </span>\n                    <span style={{ display: 'flex', marginLeft: '2rem' }}>\n                      <h6> Sex. &nbsp;</h6> <h6 style={{ fontWeight: 'normal' }}>{sex}</h6>\n                    </span>\n                    <span style={{ display: 'flex', marginLeft: '2rem' }}>\n                      <h6>Next Appointment Date. &nbsp;</h6>{' '}\n                      <h6 style={{ fontWeight: 'normal' }}>\n                        {nextApointmentDate ? formattedDate : '-'}\n                      </h6>\n                    </span>\n                    {/* <p className=\"card-text\">Phone No. {phone}</p>\n                    <p className=\"card-text\" style={{ marginLeft: '3rem' }}>\n                      Age : {age}\n                    </p>\n                    <p className=\"card-text\" style={{ marginLeft: '3rem' }}>\n                      Sex : {sex}\n                    </p>\n                    <p className=\"card-text\" style={{ marginLeft: '3rem' }}>\n                      Next Appointment Date : {formattedDate}\n                    </p> */}\n                  </div>\n                  <div className=\"text-end\">\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-success\"\n                      onClick={() => handleToggleDetails(_id)}\n                    >\n                      {/* {isDetails ? 'Close Details' : 'Show Details'} */}\n                      Show Diagnosis\n                    </button>\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-warning\"\n                      style={{ marginLeft: '2rem' }}\n                      onClick={() => handleAddDiagnosis(_id)}\n                    >\n                      {diagnosis ? 'Add New Follow-Up' : 'Add New Diagnosis'}\n                    </button>\n                  </div>\n                  {isDetailsOpen && isDetails && (\n                    <div>\n                      <PatientShowDetails diagnosis={diagnosis} desc={desc} />\n                    </div>\n                  )}\n                  {isAddDiagnosisOpen && isAddNewDiagnosis && (\n                    <div>\n                      <PatientAddNewRecord\n                        _id={_id}\n                        getSearchByPatient={getSearchByPatient}\n                        setIsAddNewDiagnosis={setIsAddNewDiagnosis}\n                        setIsDetailed={setIsDetailed}\n                        diagnosisProp={diagnosisProp}\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nPatientInfoData.propTypes = {\n  patientSearch: PropTypes.array.isRequired,\n  getSearchByPatient: PropTypes.func.isRequired,\n}\n\nexport default PatientInfoData\n","import * as React from 'react'\nimport CircularProgress from '@mui/material/CircularProgress'\nimport Box from '@mui/material/Box'\n\nconst AddPatientLoader = () => {\n  return (\n    <Box\n      style={{\n        width: '100%',\n        height: '100%',\n        lineHeight: '20vh',\n        textAlign: 'center',\n        marginTop: '10px',\n      }}\n    >\n      <CircularProgress />\n    </Box>\n  )\n}\n\nexport default AddPatientLoader\n","import axios from 'axios'\nimport React, { useEffect, useState } from 'react'\nimport { getFetch, postFetch, postFetchContent, postFetchData, postFetchFile } from 'src/api/Api'\nimport PatientInfoData from './PatientInfoData'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faXmark } from '@fortawesome/free-solid-svg-icons'\nimport { DemoContainer } from '@mui/x-date-pickers/internals/demo'\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider'\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport Loader from '../loader/Loader'\nimport AddPatientLoader from '../loader/AddPatientLoader'\nimport { useLocation } from 'react-router-dom'\nimport SpinnerOverlay from 'src/views/publicItems/ SpinnerOverlay'\n\nconst PatientPage = () => {\n  const location = useLocation()\n  console.log('location', Number(location?.state?.crn))\n  let API_URL = process.env.REACT_APP_API_URL\n  // const API_URL = process.env.API_URL\n  let patientData = localStorage.getItem('patientRecord')\n  let patientRecord = JSON.parse(patientData)\n  const [updateState, setUpdateState] = useState(false)\n  const [loader, setLoader] = useState(false)\n  const [addPatientLoader, setaddPatientLoader] = useState(false)\n\n  const [startingDate, setStartingDate] = React.useState(null)\n  const [data, setData] = useState(false)\n  const [search, setSearch] = useState('')\n  const [patientSearch, setPatientSearch] = useState([])\n  const [problems, setProblems] = useState([])\n  const [tests, setTests] = useState([])\n  const [scales, setScales] = useState([])\n\n  let [fileUploadingSpinner, setfileUploadingSpinner] = useState(false)\n  const [desc, setDesc] = useState('')\n  const [formData, setFormData] = useState({\n    name: '',\n    age: '',\n    sex: 'male',\n    phone: '',\n    crn: '',\n    diagnosis: [],\n    desc: '',\n    doctor_id: patientRecord?._id,\n  })\n  // const [diagnosis, setDiagnosis] = useState([])\n\n  const handleStartingDateChange = (date) => {\n    setStartingDate(date)\n  }\n  console.log('value date', startingDate)\n  useEffect(() => {\n    // Fetch problems from API\n    setSearch('')\n    fetchProblems()\n  }, [])\n\n  const fetchProblems = async () => {\n    try {\n      const problemsResponse = await getFetch(\n        `${API_URL}/api/problem/${patientRecord?.department_id?._id}`,\n      )\n      const problemsData = problemsResponse?.data?.data[0]\n      if (problemsData) {\n        const problemFilter = problemsData.problemName\n          .filter((item) => item.type === 'problem')\n          .map((problem) => problem.name)\n        const scaleFilter = problemsData.problemName\n          .filter((item) => item.type === 'scale')\n          .map((scale) => scale.name)\n        const testFilter = problemsData.problemName\n          .filter((item) => item.type === 'test')\n          .map(({ name, inputType }) => ({ name: name, inputType }))\n        setTests(testFilter)\n        setScales(scaleFilter)\n        setProblems(problemFilter)\n      }\n    } catch (error) {\n      console.error('Error fetching problems:', error)\n    }\n  }\n\n  console.log('problems', problems)\n\n  const clearSearch = () => {\n    try {\n      setSearch('')\n      setPatientSearch([])\n      // getSearchByPatient()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const getSearchByPatient = async () => {\n    try {\n      let searchData = search || location?.state?.crn\n      if (searchData?.length === 0) {\n        return\n      }\n      setLoader(true)\n      const data = await getFetch(`${API_URL}/api/patient/${searchData}`)\n      console.log('searchData', data)\n      setPatientSearch(data?.data?.data)\n      setTimeout(() => {\n        setLoader(false)\n      }, 3000)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    console.log('before', inputs)\n  })\n\n  const handleSubmit = async () => {\n    console.log('updatedFormData', inputs)\n\n    setSearch('')\n\n    // Check if required fields are filled\n    if (!formData.name || !formData.age || !formData.sex || !formData.phone || !formData.crn) {\n      return toast.warning('Please fill all Patient details')\n    }\n\n    if (inputs.length === 1 && inputs[0].problem === '') {\n      return toast.warning('Please select at least one Chief complaint')\n    }\n\n    for (const data of inputs) {\n      if (data.test !== '' && data.testInput === '') {\n        toast.warning('Please give input for selected test')\n        return // Stop further execution\n      }\n      if (data.scale !== '' && data.value === '') {\n        toast.warning('Please give input for selected scale')\n        return // Stop further execution\n      }\n      console.log('data', data)\n    }\n    // toast.warning('Uploading Files and Reports')\n    setfileUploadingSpinner(true)\n    try {\n      await Promise.all(\n        inputs.map(async (data, index) => {\n          if (data.testInput.files) {\n            const files = data.testInput.files\n            if (files.length > 0) {\n              const formData = new FormData()\n              files.forEach((file) => {\n                // Check if the file type is allowed\n                const allowedFileTypes = ['image/jpeg', 'image/png', 'application/pdf']\n                if (allowedFileTypes.includes(file.type)) {\n                  formData.append('files', file) // Append each allowed file to the FormData\n                } else {\n                  console.warn('File type not allowed:', file.type)\n                }\n              })\n              if (formData.has('files')) {\n                const response = await postFetchFile(\n                  `${API_URL}/api/user/uploadPatientReport`,\n                  formData,\n                )\n                if (response) {\n                  setfileUploadingSpinner(false)\n                  inputs[index].testInput.files = response.filesInfo\n                }\n              } else {\n                setfileUploadingSpinner(false)\n                console.warn('No valid files to upload')\n              }\n            }\n          } else {\n            inputs[index].testInput.files = null\n            setfileUploadingSpinner(false)\n          }\n        }),\n      )\n    } catch (error) {\n      setfileUploadingSpinner(false)\n      console.error('Error uploading files:', error)\n      return\n    }\n\n    const updatedFormData = {\n      ...formData,\n      diagnosis: [\n        {\n          diagnosData: inputs,\n          date: Date(),\n          desc,\n        },\n      ],\n      nextApointmentDate: startingDate,\n    }\n\n    try {\n      // console.log('pre', updatedFormData)\\\n      const doctorRecord = await localStorage.getItem('patientRecord')\n      const doctorId = JSON.parse(doctorRecord)?._id\n      // console.log('Guarav', JSON.parse(doctorRecord)?._id)\n      const data = await postFetchData(`${API_URL}/api/patient/create/${doctorId}`, updatedFormData)\n      if (data.success === true) {\n        toast.success('Patient Created Successfully', {\n          autoClose: 2000,\n        })\n\n        setaddPatientLoader(true)\n        setData(false)\n        setTimeout(() => {\n          // toast.success('Patient Created Successfully')\n          setUpdateState(true)\n          setaddPatientLoader(false)\n          // setDiagnosis([])\n          setDesc('')\n          setStartingDate(null)\n          setInputs([\n            { problem: '', test: '', testInput: { files: '', text: '' }, scale: '', value: '' },\n          ])\n        }, 2000)\n        setFormData({\n          name: '',\n          age: '',\n          sex: 'male',\n          phone: '',\n          crn: '',\n          diagnosis: [],\n          desc: '',\n          doctor_id: patientRecord?._id,\n        })\n      }\n      if (data.message === 'phone Already Exists') {\n        toast.warning('phone Already Exists')\n        setfileUploadingSpinner(false) // Set loading to false in case of an error\n      }\n      if (data.message === 'Crn Already Exists') {\n        toast.warning('Crn Already Exists')\n        setfileUploadingSpinner(false) // Set loading to false in case of an error\n      }\n      console.log('data', data)\n      setSearch(data?.data?.crn)\n    } catch (error) {\n      toast.warning('Something went wrong')\n      setfileUploadingSpinner(false) // Set loading to false in case of an error\n      console.error('Error submitting data:', error)\n    }\n  }\n\n  // const handleSubmit = async () => {\n  //   console.log(inputs)\n  // }\n\n  // const handleSubmit = async () => {\n  //   // console.log('updatedFormData', inputs)\n\n  //   setSearch('')\n\n  //   // Check if required fields are filled\n  //   // if (!formData.name || !formData.age || !formData.sex || !formData.phone || !formData.crn) {\n  //   //   return toast.warning('Please fill all Patient details')\n  //   // }\n\n  //   // if (inputs.length === 1 && inputs[0].problem === '') {\n  //   //   return toast.warning('Please select at least one Chief complaint')\n  //   // }\n\n  //   // for (const data of inputs) {\n  //   //   if (data.test !== '' && data.testInput === '') {\n  //   //     toast.warning('Please give input for selected test')\n  //   //     return // Stop further execution\n  //   //   }\n  //   //   if (data.scale !== '' && data.value === '') {\n  //   //     toast.warning('Please give input for selected scale')\n  //   //     return // Stop further execution\n  //   //   }\n  //   //   console.log('data', data)\n  //   // }\n  //   // // toast.warning('Uploading Files and Reports')\n  //   // setfileUploadingSpinner(true)\n  //   // try {\n  //   //   await Promise.all(\n  //   //     inputs.map(async (data, index) => {\n  //   //       if (data.testInput.files) {\n  //   //         const files = data.testInput.files\n  //   //         if (files.length > 0) {\n  //   //           const formData = new FormData()\n  //   //           files.forEach((file) => {\n  //   //             formData.append('files', file) // Append each file to the FormData\n  //   //           })\n  //   //           const response = await postFetchFile(\n  //   //             `${API_URL}/api/user/uploadPatientReport`,\n  //   //             formData,\n  //   //           )\n  //   //           if (response) {\n  //   //             setfileUploadingSpinner(false)\n  //   //             inputs[index].testInput.files = response.filesInfo\n  //   //           }\n  //   //         }\n  //   //       } else {\n  //   //         inputs[index].testInput.files = null\n  //   //       }\n  //   //     }),\n  //   //   )\n  //   // } catch (error) {\n  //   //   setfileUploadingSpinner(false)\n  //   //   console.error('Error uploading files:', error)\n  //   //   return\n  //   // }\n  //   // try {\n  //   //   await Promise.all(\n  //   //     // Use Promise.all to wait for all uploads to finish\n  //   //     inputs.map(async (data, index) => {\n  //   //       if (typeof data.testInput !== 'string') {\n  //   //         const file = data.testInput\n  //   //         const formData = new FormData()\n  //   //         formData.append('file', file)\n  //   //         const response = await postFetchFile(\n  //   //           `${API_URL}/api/user/uploadPatientReport`,\n  //   //           formData,\n  //   //         )\n  //   //         if (response) {\n  //   //           inputs[index].testInput = response?.fileName\n  //   //         }\n  //   //       }\n  //   //     }),\n  //   //   )\n  //   // } catch (error) {\n  //   //   setfileUploadingSpinner(false) // Set loading to false in case of an error\n  //   //   console.error('Error submitting data:', error)\n  //   // }\n\n  //   const updatedFormData = {\n  //     ...formData,\n  //     diagnosis: [\n  //       {\n  //         diagnosData: inputs,\n  //         date: Date(),\n  //         desc,\n  //       },\n  //     ],\n  //     nextApointmentDate: startingDate,\n  //   }\n  //   console.log(updatedFormData)\n  //   // try {\n  //   //   // console.log('pre', updatedFormData)\\\n  //   //   const data = await postFetchData(`${API_URL}/api/patient/create`, updatedFormData)\n  //   //   if (data.success === true) {\n  //   //     toast.success('Patient Created Successfully', {\n  //   //       autoClose: 2000,\n  //   //     })\n\n  //   //     setaddPatientLoader(true)\n  //   //     setData(false)\n  //   //     setTimeout(() => {\n  //   //       // toast.success('Patient Created Successfully')\n  //   //       setUpdateState(true)\n  //   //       setaddPatientLoader(false)\n  //   //       // setDiagnosis([])\n  //   //       setDesc('')\n  //   //       setStartingDate(null)\n  //   //       setInputs([\n  //   //         { problem: '', test: '', testInput: { files: '', text: '' }, scale: '', value: '' },\n  //   //       ])\n  //   //     }, 2000)\n  //   //     setFormData({\n  //   //       name: '',\n  //   //       age: '',\n  //   //       sex: 'male',\n  //   //       phone: '',\n  //   //       crn: '',\n  //   //       diagnosis: [],\n  //   //       desc: '',\n  //   //       doctor_id: patientRecord?._id,\n  //   //     })\n  //   //   }\n  //   //   if (data.message == 'phone Already Exists') {\n  //   //     toast.warning('phone Already Exists')\n  //   //     setfileUploadingSpinner(false) // Set loading to false in case of an error\n  //   //   }\n  //   //   if (data.message == 'Crn Already Exists') {\n  //   //     toast.warning('Crn Already Exists')\n  //   //     setfileUploadingSpinner(false) // Set loading to false in case of an error\n  //   //   }\n  //   //   console.log('data', data)\n  //   //   setSearch(data?.data?.crn)\n  //   // } catch (error) {\n  //   //   toast.warning('Something went wrong')\n  //   //   setfileUploadingSpinner(false) // Set loading to false in case of an error\n\n  //   //   console.error('Error submitting data:', error)\n  //   // }\n  // }\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      event.preventDefault()\n      getSearchByPatient()\n    }\n  }\n\n  useEffect(() => {\n    if (updateState === true) {\n      getSearchByPatient()\n    }\n  }, [updateState])\n\n  let [dateAndTime, setDateAndTime] = useState(new Date())\n  useEffect(() => {\n    if (location?.state?.crn) {\n      setSearch(location?.state?.crn)\n      getSearchByPatient()\n    }\n  }, [location])\n\n  //////// new updates\n\n  let [removeAndAddInput, setremoveAndAddInput] = useState(false)\n\n  const [inputs, setInputs] = useState([\n    { problem: '', test: '', testInput: { files: '', text: '' }, scale: '', value: '' },\n  ])\n\n  const handleInputChange = (index, event) => {\n    const { name, value } = event.target\n    const updatedInputs = [...inputs]\n    updatedInputs[index][name] = value\n    setInputs(updatedInputs)\n  }\n\n  const handleInputTestText = (index, event) => {\n    const { name, value } = event.target\n    const updatedInputs = [...inputs]\n    updatedInputs[index][name] = { text: value }\n    setInputs(updatedInputs)\n  }\n\n  // const handleFileInputChange = (index, event) => {\n  //   const { name, files } = event.target\n  //   const updatedInputs = [...inputs]\n  //   updatedInputs[index][name] = files[0]\n  //   setInputs(updatedInputs)\n  //   console.log('Guarv', inputs)\n  // }\n\n  // const handleFileInputChange = (index, event) => {\n  //   const { name, files } = event.target\n  //   const allowedFileTypes = ['image/jpeg', 'image/png', 'application/pdf']\n  //   console.log('files', files[0]?.size)\n  //   if (files[0]?.size > 31457280) {\n  //     event.target.value = ''\n  //     return toast.warning('file size should be less than 30 mb', {\n  //       autoClose: 1500,\n  //     })\n  //   }\n  //   // Check if the file type is allowed\n  //   if (files && files[0] && allowedFileTypes.includes(files[0].type)) {\n  //     const updatedInputs = [...inputs]\n  //     updatedInputs[index][name] = files[0]\n  //     setInputs(updatedInputs)\n  //   } else {\n  //     event.target.value = ''\n  //     toast.warning('Only images and PDFs are allowed', {\n  //       autoClose: 1500,\n  //     })\n  //   }\n  // }\n\n  const handleFileInputChange = (index, event) => {\n    const { name, files } = event.target\n    const allowedFileTypes = ['image/jpeg', 'image/png', 'application/pdf']\n    const maxFiles = 3 // Maximum number of files allowed\n\n    // Check if the number of selected files exceeds the limit\n    if (files.length > maxFiles) {\n      event.target.value = '' // Clear the file input\n      toast.warning('You can only upload up to 3 files', { autoClose: 1500 })\n      return\n    }\n\n    const updatedInputs = [...inputs]\n\n    // Convert FileList to array and filter out files that exceed the size limit or are not of allowed types\n    const filesArray = Array.from(files).filter((file) => {\n      if (file.size > 31457280) {\n        toast.warning('File size should be less than 30 MB', { autoClose: 1500 })\n        return false\n      }\n      if (!allowedFileTypes.includes(file.type)) {\n        toast.warning('Only images and PDFs are allowed', { autoClose: 1500 })\n        return false\n      }\n      return true\n    })\n\n    updatedInputs[index][name] = { files: filesArray } // Store the array of files\n    setInputs(updatedInputs)\n  }\n\n  const handleAddInput = () => {\n    setInputs([\n      ...inputs,\n      { problem: '', test: '', testInput: { files: '', text: '' }, scale: '', value: '' },\n    ])\n  }\n\n  const handleRemoveInput = (index) => {\n    const updatedInputs = [...inputs]\n    updatedInputs.splice(index, 1)\n    setInputs(updatedInputs)\n  }\n\n  useEffect(() => {\n    if (inputs.length > 1) {\n      setremoveAndAddInput(true)\n    } else {\n      setremoveAndAddInput(false)\n    }\n  }, [handleRemoveInput, handleAddInput, handleInputChange])\n  useEffect(() => {\n    console.log('Updated inputs:', inputs)\n  }, [inputs])\n\n  return (\n    <>\n      <div>\n        {!data && !addPatientLoader ? (\n          <div>\n            <p style={{ fontWeight: 'bolder' }}>Search Patient</p>\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n              <div className=\"d-flex\">\n                <input\n                  style={{ paddingLeft: '5px' }}\n                  className=\"form-control\"\n                  placeholder=\"CR no. or Phone no.\"\n                  type=\"text\"\n                  name=\"search\"\n                  value={search}\n                  // autoComplete={false}\n                  onKeyPress={handleKeyPress}\n                  onChange={(e) => setSearch(e.target.value)}\n                />\n\n                {/* </button> */}\n                <button\n                  className=\"btn btn-primary\"\n                  style={{ marginLeft: '1rem', borderRadius: '5px' }}\n                  type=\"button\"\n                  onClick={getSearchByPatient}\n                >\n                  Search\n                </button>\n                {search?.length ? (\n                  <button\n                    className=\"btn btn-danger text-light\"\n                    style={{ marginLeft: '1rem', borderRadius: '5px' }}\n                    type=\"button\"\n                    onClick={clearSearch}\n                  >\n                    Clear\n                  </button>\n                ) : (\n                  ''\n                )}\n              </div>\n              <div>\n                <button\n                  style={{ marginLeft: '1rem', borderRadius: '5px' }}\n                  type=\"button\"\n                  onClick={() => setData(true)}\n                  className=\"btn btn-outline-dark\"\n                >\n                  Add a Patient\n                </button>\n              </div>\n            </div>\n          </div>\n        ) : (\n          ''\n        )}\n\n        {patientSearch?.length && !data && !addPatientLoader ? (\n          <PatientInfoData\n            patientSearch={patientSearch}\n            setData={setData}\n            getSearchByPatient={getSearchByPatient}\n          />\n        ) : (\n          <div>\n            {data ? (\n              <>\n                {fileUploadingSpinner && <SpinnerOverlay loading={fileUploadingSpinner} />}\n\n                <div className=\"content-to-be-blurred\">\n                  <div style={{ marginTop: '1rem' }}>\n                    <div>\n                      <hr />\n                      <h4>Patient Details</h4>\n\n                      <div>\n                        <div className=\"row\">\n                          <div className=\"col-md-4\">\n                            <div>\n                              <label className=\"col-sm-4 mt-2 patientNamediv\">\n                                Name <span style={{ color: 'red' }}>*</span>\n                              </label>\n                              <div className=\"col-sm-8\">\n                                <input\n                                  type=\"text\"\n                                  className=\"form-control \"\n                                  name=\"name\"\n                                  value={formData.name}\n                                  onChange={(e) =>\n                                    setFormData({ ...formData, name: e.target.value })\n                                  }\n                                />\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"col-md-4\">\n                            <div>\n                              <label className=\"col-sm-4 mt-2 patientNamediv\">\n                                Age <span style={{ color: 'red' }}>*</span>\n                              </label>\n                              <div className=\"col-sm-8\">\n                                <input\n                                  type=\"number\"\n                                  className=\"form-control \"\n                                  name=\"age\"\n                                  value={formData.age}\n                                  onChange={(e) =>\n                                    setFormData({ ...formData, age: e.target.value })\n                                  }\n                                />\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"col-md-4\">\n                            <div>\n                              <label className=\"col-sm-4 mt-2 patientNamediv\">\n                                Sex <span style={{ color: 'red' }}>*</span>\n                              </label>\n                              <div className=\"col-sm-8\">\n                                <select\n                                  className=\"form-control \"\n                                  name=\"sex\"\n                                  value={formData.sex}\n                                  onChange={(e) =>\n                                    setFormData({ ...formData, sex: e.target.value })\n                                  }\n                                >\n                                  <option value=\"male\">Male</option>\n                                  <option value=\"female\">Female</option>\n                                  <option value=\"other\">Other</option>\n                                </select>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"row \">\n                          <div className=\"col-md-4 mt-4\">\n                            <div>\n                              <label className=\"col-lg-4 patientNamediv\">\n                                Phone No <span style={{ color: 'red' }}>*</span>\n                              </label>\n                              <div className=\" col-lg-8 col-sm-8\">\n                                <input\n                                  className=\"form-control \"\n                                  type=\"text\"\n                                  name=\"phone\"\n                                  value={formData.phone}\n                                  onChange={(e) => {\n                                    if (/^\\d*$/.test(e.target.value) || e.target.value === '') {\n                                      setFormData({ ...formData, phone: e.target.value })\n                                    }\n                                  }}\n                                  required={true}\n                                />\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"col-md-4 mt-4\">\n                            <div>\n                              <label className=\"col-sm-4  patientNamediv\">\n                                CR No <span style={{ color: 'red' }}>*</span>\n                              </label>\n                              <div className=\"col-sm-8\">\n                                <input\n                                  className=\"form-control \"\n                                  type=\"test\"\n                                  name=\"crn\"\n                                  value={formData.crn}\n                                  onChange={(e) =>\n                                    setFormData({ ...formData, crn: e.target.value })\n                                  }\n                                  required={true}\n                                />\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <hr />\n                      <div style={{ margin: '1rem auto 1rem 0' }}>\n                        <h4>Diagnosis: ({patientRecord?.department_id?.departmentName})</h4>\n                      </div>\n                      <div>\n                        <form className=\"mb-3\">\n                          {inputs.map((input, index) => (\n                            <div key={index} className=\"row mt-1 mb-2\">\n                              <div className=\"col-md-2\">\n                                <label>\n                                  <select\n                                    className=\"form-control \"\n                                    style={{ width: '10rem', appearance: 'auto', height: '38px' }}\n                                    name=\"problem\"\n                                    value={input.problem}\n                                    onChange={(event) => handleInputChange(index, event)}\n                                  >\n                                    <option value=\"\">Chief complaint</option>\n                                    {problems.map((problem, problemIndex) => (\n                                      <option key={problemIndex} value={problem}>\n                                        {problem}\n                                      </option>\n                                    ))}\n                                  </select>\n                                </label>\n                              </div>\n                              <div className=\"col-md-2\">\n                                <label>\n                                  <select\n                                    className=\"form-control \"\n                                    style={{ width: '10rem', appearance: 'auto', height: '38px' }}\n                                    name=\"test\"\n                                    value={input.test}\n                                    onChange={(event) => handleInputChange(index, event)}\n                                  >\n                                    <option value=\"\">Select Test</option>\n                                    {tests.map((test, testIndex) => (\n                                      <option key={testIndex} value={test.name}>\n                                        {test.name}\n                                      </option>\n                                    ))}\n                                  </select>\n                                </label>\n                              </div>\n                              {input.test === '' ? (\n                                <div className=\"col-md-2\">\n                                  <label>\n                                    <input\n                                      className=\"form-control \"\n                                      style={{ width: '10rem', appearance: 'auto' }}\n                                      placeholder=\"Select a Test\"\n                                      type=\"text\"\n                                      disabled=\"true\"\n                                    />\n                                  </label>\n                                </div>\n                              ) : (\n                                <div className=\"col-md-2\">\n                                  {tests.map((test, testIndex) => {\n                                    if (test.name === input.test) {\n                                      if (test.inputType === 'text') {\n                                        return (\n                                          <label key={testIndex}>\n                                            <input\n                                              className=\"form-control\"\n                                              style={{ width: '10rem' }}\n                                              placeholder=\"Enter test Value\"\n                                              type=\"text\"\n                                              name=\"testInput\"\n                                              value={input.testInput.text} // Here is the issue\n                                              onChange={(event) =>\n                                                handleInputTestText(index, event)\n                                              }\n                                            />\n                                          </label>\n                                        )\n                                      } else if (test.inputType === 'file') {\n                                        return (\n                                          <label key={testIndex}>\n                                            <input\n                                              className=\"form-control\"\n                                              style={{ width: '10rem' }}\n                                              type=\"file\"\n                                              multiple\n                                              name=\"testInput\"\n                                              accept=\"image/jpeg, image/png, application/pdf\"\n                                              onChange={(event) =>\n                                                handleFileInputChange(index, event)\n                                              }\n                                            />\n                                          </label>\n                                        )\n                                      }\n                                    }\n                                    return null\n                                  })}\n                                </div>\n                              )}\n                              <div className=\"col-md-2\">\n                                <label>\n                                  <select\n                                    className=\"form-control \"\n                                    style={{ width: '10rem', appearance: 'auto', height: '38px' }}\n                                    name=\"scale\"\n                                    value={input.scale}\n                                    onChange={(event) => handleInputChange(index, event)}\n                                  >\n                                    <option value=\"\">Select Scale</option>\n                                    {scales.map((scale, scaleIndex) => (\n                                      <option key={scaleIndex} value={scale}>\n                                        {scale}\n                                      </option>\n                                    ))}\n                                  </select>\n                                </label>\n                              </div>\n                              <div className=\"col-md-2\">\n                                <label>\n                                  <input\n                                    className=\"form-control \"\n                                    style={{ width: '10rem', appearance: 'auto' }}\n                                    placeholder=\"Enter Scale Value\"\n                                    type=\"text\"\n                                    name=\"value\"\n                                    value={input.value}\n                                    onChange={(event) => handleInputChange(index, event)}\n                                  />\n                                </label>\n                              </div>\n                              <div className=\"col-md-2 d-flex justify-content-center\">\n                                {removeAndAddInput && (\n                                  <button\n                                    className=\"btn btn-danger\"\n                                    type=\"button\"\n                                    onClick={() => handleRemoveInput(index)}\n                                  >\n                                    Remove\n                                  </button>\n                                )}\n                              </div>\n                            </div>\n                          ))}\n                          <div className=\"d-flex justify-content-end\">\n                            <button\n                              className=\"btn btn-primary me-4\"\n                              type=\"button\"\n                              onClick={handleAddInput}\n                            >\n                              Add More\n                            </button>\n                          </div>\n                        </form>\n                      </div>\n                      <div>\n                        <textarea\n                          rows={4}\n                          className=\"form-control col-12\"\n                          placeholder=\"Notes (Optional)\"\n                          name=\"desc\"\n                          value={desc}\n                          onChange={(e) => setDesc(e.target.value)}\n                        ></textarea>\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"d-flex mt-2\">\n                        <div className=\"w-auto\">\n                          <LocalizationProvider dateAdapter={AdapterDayjs}>\n                            <DemoContainer components={['DateTimePicker']}>\n                              <DateTimePicker\n                                label=\"Next Appointment Date\"\n                                value={startingDate}\n                                onChange={handleStartingDateChange}\n                                // ampm={false}\n                              />\n                            </DemoContainer>\n                          </LocalizationProvider>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-end m-4\">\n                      <button className=\"btn btn-info mt-3 mx-2 w-auto\" onClick={handleSubmit}>\n                        Submit\n                      </button>\n                      <button className=\"btn btn-info mt-3 w-auto\" onClick={() => setData(false)}>\n                        Close\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </>\n            ) : (\n              <div>\n                {!addPatientLoader ? (\n                  <div\n                    style={{\n                      width: '100%',\n                      height: '20vh',\n                      lineHeight: '20vh',\n                      textAlign: 'center',\n                      backgroundColor: 'white',\n                      marginTop: '10px',\n                    }}\n                  >\n                    {loader ? <Loader /> : 'No Data'}\n                  </div>\n                ) : (\n                  ''\n                )}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n      {addPatientLoader ? <AddPatientLoader /> : ''}\n      <ToastContainer />\n    </>\n  )\n}\n\nexport default PatientPage\n"],"names":["_ref","diagnosis","reversedDiagnosis","setReversedDiagnosis","useState","loading","setLoading","requestedFileLoading","setRequestedFileLoading","useEffect","Array","isArray","reversed","reverse","hoveredFile","setHoveredFile","_jsxs","style","maxHeight","marginTop","children","map","elem","index","_elem$diagnosData","formattedDate","Date","date","toLocaleDateString","year","month","day","hour","minute","hour12","replace","_jsx","className","margin","overflow","width","border","fontFamily","borderRadius","scope","background","diagnosData","element","innerIndex","_testInput$files","problem","scale","test","testInput","value","SpinnerOverlay","message","fontWeight","text","display","files","file","fileIndex","fileName","alignItems","marginRight","onMouseEnter","fileNamee","name","parts","split","length","slice","join","editNameFun","handleMouseEnter","onMouseLeave","onClick","async","filename","response","axios","get","concat","process","responseType","blob","Blob","data","type","headers","blobUrl","URL","createObjectURL","window","open","error","console","showReportHandler","title","CIcon","icon","cilDataTransferDown","log","padding","desc","ToastContainer","_patientRecord$depart2","_id","getSearchByPatient","setIsAddNewDiagnosis","setIsDetailed","diagnosisProp","API_URL","patientData","localStorage","getItem","patientRecord","JSON","parse","inputs","setInputs","lastDiagnosis","setLastDiagnosis","lastRecords","startingDate","setStartingDate","React","patientById","setPatientById","setDesc","formData","setFormData","setDiagnosis","fileUploadingSpinner","setfileUploadingSpinner","problems","setProblems","tests","setTests","scales","setScales","fetchProblems","_patientRecord$depart","_problemsResponse$dat","problemsResponse","getFetch","department_id","problemsData","problemFilter","problemName","filter","item","scaleFilter","testFilter","_ref2","inputType","prevFormData","getPatientById","removeAndAddInput","setremoveAndAddInput","handleInputChange","event","target","updatedInputs","handleAddInput","handleRemoveInput","splice","_Fragment","departmentName","onSubmit","e","preventDefault","toast","warning","Promise","all","FormData","forEach","includes","append","warn","has","postFetchFile","filesInfo","updatedFormData","nextApointmentDate","putFetchData","success","autoClose","setTimeout","input","appearance","height","onChange","problemIndex","testIndex","placeholder","disabled","handleInputTestText","multiple","accept","handleFileInputChange","allowedFileTypes","filesArray","from","size","scaleIndex","rows","LocalizationProvider","dateAdapter","AdapterDayjs","DemoContainer","components","DateTimePicker","label","patientSearch","isAddNewDiagnosis","isDetails","selectedPatientId","setSelectedPatientId","addDiagnosisPatientId","setAddDiagnosisPatientId","patient","crn","phone","age","sex","isDetailsOpen","isAddDiagnosisOpen","toLocaleString","marginLeft","handleToggleDetails","patientId","prevState","handleAddDiagnosis","PatientShowDetails","PatientAddNewRecord","AddPatientLoader","Box","lineHeight","textAlign","CircularProgress","PatientPage","_location$state","location","useLocation","Number","state","updateState","setUpdateState","loader","setLoader","addPatientLoader","setaddPatientLoader","setData","search","setSearch","setPatientSearch","doctor_id","_location$state2","_data$data","searchData","dateAndTime","setDateAndTime","_location$state3","_location$state4","justifyContent","paddingLeft","onKeyPress","key","clearSearch","color","required","_JSON$parse","_data$data2","doctorRecord","doctorId","postFetchData","backgroundColor","Loader","PatientInfoData"],"sourceRoot":""}