{"version":3,"file":"static/js/3969.d25ac818.chunk.js","mappings":"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","sources":["api/Api.js","views/pages/login/Login.js","views/publicItems/ SpinnerOverlay.js"],"sourcesContent":["import axios from 'axios'\nexport const getFetch = async (url) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'get',\n      url: `${url}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      // withCredentials: true,\n    })\n    // if (response.status === 200) {\n    return response\n    // }\n  } catch (error) {\n    console.log(error)\n    return error\n  }\n}\nexport const getFetchByLimit = async (url, limit, page) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'GET',\n      url: `${url}/${limit}/${page}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      withCredentials: true,\n    })\n    if (response.status === 200) {\n      return await response?.data\n    }\n  } catch (error) {\n    console.log(error)\n    return error\n  }\n}\nexport const getOneFetch = async (url, id) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'GET',\n      url: `${url}/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      withCredentials: true,\n    })\n    if (response?.status === 200) {\n      return await response?.data\n    }\n  } catch (error) {\n    console.log(error)\n    if (error?.response?.status === 401) {\n      return 401\n    }\n    return error\n  }\n}\n\nexport const postFetch = async (url, data) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'post',\n      url,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data; boundary=<calculated when request is sent>',\n      },\n      data,\n      withCredentials: true,\n    })\n    if (response) {\n      return response\n    }\n  } catch (error) {\n    return error\n  }\n}\nexport const postFetchUser = async (url, data) => {\n  try {\n    // const token = localStorage.getItem(\"token\")\n    const response = await axios({\n      method: 'post',\n      url,\n      headers: {\n        // Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data',\n      },\n      data,\n      //   withCredentials: true,\n    })\n    if (response) {\n      return response\n    }\n  } catch (error) {\n    return error\n  }\n}\n\nexport const postFetchContent = async (url, data) => {\n  try {\n    const response = await axios.post(url, data, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    // if (response.status >= 200 && response.status < 300) {\n    return response.data\n    // } else {\n    //   throw new Error(`Request failed with status ${response.status}`)\n    // }\n  } catch (error) {\n    console.error('Error in postFetchContent:', error)\n    throw error\n  }\n}\n\nexport const postFetchFile = async (url, data) => {\n  try {\n    const response = await axios.post(url, data, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    })\n    // if (response.status >= 200 && response.status < 300) {\n    return response.data\n    // } else {\n    //   throw new Error(`Request failed with status ${response.status}`)\n    // }\n  } catch (error) {\n    console.error('Error in postFetchContent:', error)\n    throw error\n  }\n}\n\nexport const patchFetch = async (url, id, data) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'patch',\n      url: `${url}/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      data,\n      withCredentials: true,\n    })\n    if (response?.status === 200) {\n      return response\n    }\n  } catch (error) {\n    if (error?.response?.status === 401) {\n      return 401\n    } else {\n      return error?.response\n    }\n  }\n}\nexport const putFetch = async (url, data) => {\n  try {\n    // const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'put',\n      url: `${url}`,\n      headers: {\n        // Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data; boundary=<calculated when request is sent>',\n      },\n      data,\n      // withCredentials: true,\n    })\n    if (response.status === 200) {\n      return response\n    }\n  } catch (error) {\n    if (error) {\n      return 401\n    } else {\n      return error.response\n    }\n  }\n}\nexport const putFetchById = async (url) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'put',\n      url: `${url}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      withCredentials: true,\n    })\n    if (response.status === 200) {\n      return response\n    }\n  } catch (error) {\n    if (error) {\n      return 401\n    } else {\n      return error.response\n    }\n  }\n}\nexport const putFetchData = async (url, data) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'put',\n      url: `${url}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      data,\n      // withCredentials: true,\n    })\n    if (response) {\n      return response\n    }\n  } catch (error) {\n    if (error?.response?.status === 401) {\n      return 401\n    } else {\n      return error.response\n    }\n  }\n}\nexport const deleteFetch = async (url, id) => {\n  try {\n    // const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'delete',\n      url: `${url}/${id}`,\n      headers: {\n        // Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      // withCredentials: true,\n    })\n    if (response.status === 200) {\n      return response\n    }\n  } catch (error) {\n    if (error?.response?.status === 401) {\n      return 401\n    }\n  }\n}\n\nexport const postFetchData = async (url, data) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'post',\n      url: `${url}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      data,\n      // withCredentials: true,\n    })\n    if (response) {\n      return response?.data\n    }\n  } catch (error) {\n    if (error?.response?.status === 401) {\n      return 401\n    } else {\n      return error\n    }\n  }\n}\n","import React, { useState } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilLockLocked, cilUser } from '@coreui/icons'\nimport { postFetchData } from 'src/api/Api'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport SpinnerOverlay from 'src/views/publicItems/ SpinnerOverlay'\n\nconst Login = () => {\n  let API_URL = process.env.REACT_APP_API_URL\n  const REGISTER_URL = `${API_URL}/register`\n  const navigate = useNavigate()\n  const [data, setData] = useState({\n    email: '',\n    password: '',\n  })\n  const [loading, setLoading] = useState(false)\n\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    setData({ ...data, [name]: value })\n  }\n\n  const date = new Date().getFullYear()\n\n  const handleSubmit = async (e) => {\n    try {\n      setLoading(true)\n      e.preventDefault()\n      const dataa = await postFetchData(`${API_URL}/api/user/login`, data)\n      if (dataa.success === true) {\n        toast.success('Login successfully')\n        localStorage.setItem('token', dataa.token)\n        localStorage.setItem('patientRecord', JSON.stringify(dataa?.user))\n        window.location.reload()\n        setLoading(false)\n      }\n\n      if (dataa?.response?.data?.success === false) {\n        setLoading(false)\n        toast.warning('Invalid Credentials')\n      }\n    } catch (error) {\n      setLoading(false)\n      toast.warning('Something went wrong')\n      console.log(error)\n    }\n  }\n\n  const nevigateToRegister = () => {\n    navigate('/register')\n  }\n\n  return (\n    <div style={{ minHeight: '100vh', display: 'flex', flexDirection: 'column' }}>\n      <div className=\"bg-light d-flex flex-row align-items-center\" style={{ flex: 1 }}>\n        {loading ? <SpinnerOverlay message=\"Logging..\" /> : ''}\n        <CContainer>\n          <CRow className=\"justify-content-center\">\n            <CCol md={5}>\n              <CCardGroup>\n                <CCard className=\"p-4\">\n                  <CCardBody>\n                    <CForm onSubmit={handleSubmit}>\n                      <h2>Login</h2>\n                      <p className=\"text-medium-emphasis\">Sign In to your account</p>\n                      <CInputGroup className=\"mb-3\">\n                        <CInputGroupText>\n                          <CIcon icon={cilUser} />\n                        </CInputGroupText>\n                        <CFormInput\n                          placeholder=\"Email\"\n                          autoComplete=\"email\"\n                          name=\"email\"\n                          value={data.email}\n                          onChange={handleChange}\n                        />\n                      </CInputGroup>\n                      <CInputGroup className=\"mb-4\">\n                        <CInputGroupText>\n                          <CIcon icon={cilLockLocked} />\n                        </CInputGroupText>\n                        <CFormInput\n                          type=\"password\"\n                          placeholder=\"Password\"\n                          autoComplete=\"current-password\"\n                          name=\"password\"\n                          value={data.password}\n                          onChange={handleChange}\n                        />\n                      </CInputGroup>\n                      <CRow>\n                        <CCol xs={12} style={{ textAlign: 'center' }}>\n                          <CButton color=\"primary\" className=\"px-5\" type=\"submit\">\n                            Login\n                          </CButton>\n                        </CCol>\n                      </CRow>\n                    </CForm>\n                  </CCardBody>\n                </CCard>\n              </CCardGroup>\n            </CCol>\n          </CRow>\n        </CContainer>\n      </div>\n      {/* <footer className=\"bg-dark text-light py-2 text-center\">\n        &copy; 2024 DevLogix Technology Pvt. Ltd. All rights reserved.\n      </footer> */}\n      <ToastContainer />\n      <footer className=\"bg-light py-2 text-left\" style={{ paddingLeft: '1rem' }}>\n        Copyright &copy; {date} DevLogix Technology Pvt. Ltd. All rights reserved.\n      </footer>\n    </div>\n  )\n}\n\nexport default Login\n","// SpinnerOverlay.js\nimport React from 'react'\nimport { BarLoader } from 'react-spinners'\n\nconst SpinnerOverlay = (loading) => {\n  const message = loading.message\n  return (\n    <div style={overlayStyle(loading)}>\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        <BarLoader loading={loading} color=\"#36D7B7\" />\n        {message ? <p style={{ margin: 'auto' }}>{message}</p> : ''}\n      </div>\n    </div>\n  )\n}\n\nconst overlayStyle = (loading) => ({\n  position: 'fixed',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%',\n  backgroundColor: 'rgba(255, 255, 255, 0.7)',\n  display: loading ? 'flex' : 'none',\n  justifyContent: 'center',\n  alignItems: 'center',\n  zIndex: 9999,\n})\n\nexport default SpinnerOverlay\n"],"names":["getFetch","async","token","localStorage","getItem","axios","method","url","concat","headers","Authorization","error","console","log","postFetchFile","data","post","putFetchData","response","_error$response3","status","postFetchData","_error$response5","Login","API_URL","process","useNavigate","setData","useState","email","password","loading","setLoading","handleChange","e","name","value","target","date","Date","getFullYear","_jsxs","style","minHeight","display","flexDirection","children","className","flex","_jsx","SpinnerOverlay","message","CContainer","CRow","CCol","md","CCardGroup","CCard","CCardBody","CForm","onSubmit","_dataa$response","_dataa$response$data","preventDefault","dataa","success","toast","setItem","JSON","stringify","user","window","location","reload","warning","CInputGroup","CInputGroupText","CIcon","icon","cilUser","CFormInput","placeholder","autoComplete","onChange","cilLockLocked","type","xs","textAlign","CButton","color","ToastContainer","paddingLeft","overlayStyle","position","top","left","width","height","backgroundColor","justifyContent","alignItems","zIndex","BarLoader","margin"],"sourceRoot":""}