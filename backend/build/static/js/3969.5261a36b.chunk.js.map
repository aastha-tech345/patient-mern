{"version":3,"file":"static/js/3969.5261a36b.chunk.js","mappings":"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","sources":["api/Api.js","views/pages/login/Login.js","views/publicItems/ SpinnerOverlay.js"],"sourcesContent":["import axios from 'axios'\nexport const getFetch = async (url) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'get',\n      url: `${url}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      // withCredentials: true,\n    })\n    // if (response.status === 200) {\n    return response\n    // }\n  } catch (error) {\n    console.log(error)\n    return error\n  }\n}\nexport const getFetchByLimit = async (url, limit, page) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'GET',\n      url: `${url}/${limit}/${page}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      withCredentials: true,\n    })\n    if (response.status === 200) {\n      return await response?.data\n    }\n  } catch (error) {\n    console.log(error)\n    return error\n  }\n}\nexport const getOneFetch = async (url, id) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'GET',\n      url: `${url}/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      withCredentials: true,\n    })\n    if (response?.status === 200) {\n      return await response?.data\n    }\n  } catch (error) {\n    console.log(error)\n    if (error?.response?.status === 401) {\n      return 401\n    }\n    return error\n  }\n}\n\nexport const postFetch = async (url, data) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'post',\n      url,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data; boundary=<calculated when request is sent>',\n      },\n      data,\n      withCredentials: true,\n    })\n    if (response) {\n      return response\n    }\n  } catch (error) {\n    return error\n  }\n}\nexport const postFetchUser = async (url, data) => {\n  try {\n    // const token = localStorage.getItem(\"token\")\n    const response = await axios({\n      method: 'post',\n      url,\n      headers: {\n        // Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data',\n      },\n      data,\n      //   withCredentials: true,\n    })\n    if (response) {\n      return response\n    }\n  } catch (error) {\n    return error\n  }\n}\n\nexport const postFetchContent = async (url, data) => {\n  try {\n    const response = await axios.post(url, data, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    // if (response.status >= 200 && response.status < 300) {\n    return response.data\n    // } else {\n    //   throw new Error(`Request failed with status ${response.status}`)\n    // }\n  } catch (error) {\n    console.error('Error in postFetchContent:', error)\n    throw error\n  }\n}\n\nexport const postFetchFile = async (url, data) => {\n  try {\n    const response = await axios.post(url, data, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    })\n    // if (response.status >= 200 && response.status < 300) {\n    return response.data\n    // } else {\n    //   throw new Error(`Request failed with status ${response.status}`)\n    // }\n  } catch (error) {\n    console.error('Error in postFetchContent:', error)\n    throw error\n  }\n}\n\nexport const patchFetch = async (url, id, data) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'patch',\n      url: `${url}/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      data,\n      withCredentials: true,\n    })\n    if (response?.status === 200) {\n      return response\n    }\n  } catch (error) {\n    if (error?.response?.status === 401) {\n      return 401\n    } else {\n      return error?.response\n    }\n  }\n}\nexport const putFetch = async (url, data) => {\n  try {\n    // const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'put',\n      url: `${url}`,\n      headers: {\n        // Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data; boundary=<calculated when request is sent>',\n      },\n      data,\n      // withCredentials: true,\n    })\n    if (response.status === 200) {\n      return response\n    }\n  } catch (error) {\n    if (error) {\n      return 401\n    } else {\n      return error.response\n    }\n  }\n}\nexport const putFetchById = async (url) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'put',\n      url: `${url}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      withCredentials: true,\n    })\n    if (response.status === 200) {\n      return response\n    }\n  } catch (error) {\n    if (error) {\n      return 401\n    } else {\n      return error.response\n    }\n  }\n}\nexport const putFetchData = async (url, data) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'put',\n      url: `${url}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      data,\n      // withCredentials: true,\n    })\n    if (response) {\n      return response\n    }\n  } catch (error) {\n    if (error?.response?.status === 401) {\n      return 401\n    } else {\n      return error.response\n    }\n  }\n}\nexport const deleteFetch = async (url, id) => {\n  try {\n    // const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'delete',\n      url: `${url}/${id}`,\n      headers: {\n        // Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      // withCredentials: true,\n    })\n    if (response.status === 200) {\n      return response\n    }\n  } catch (error) {\n    if (error?.response?.status === 401) {\n      return 401\n    }\n  }\n}\n\nexport const postFetchData = async (url, data) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'post',\n      url: `${url}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      data,\n      // withCredentials: true,\n    })\n    if (response) {\n      return response?.data\n    }\n  } catch (error) {\n    if (error?.response?.status === 401) {\n      return 401\n    } else {\n      return error\n    }\n  }\n}\n","import React, { useState } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilLockLocked, cilUser } from '@coreui/icons'\nimport { postFetchData } from 'src/api/Api'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { faL } from '@fortawesome/free-solid-svg-icons'\nimport SpinnerOverlay from 'src/views/publicItems/ SpinnerOverlay'\n// import { API_URL } from 'src/constant'\nconst Login = () => {\n  let API_URL = process.env.REACT_APP_API_URL\n  const REGISTER_URL = `${API_URL}/register`\n  const navigate = useNavigate()\n  const [data, setData] = useState({\n    email: '',\n    password: '',\n  })\n  const [loading, setLoading] = useState(false)\n\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    setData({ ...data, [name]: value })\n  }\n\n  const handleSubmit = async (e) => {\n    try {\n      setLoading(true)\n      e.preventDefault()\n      const dataa = await postFetchData(`${API_URL}/api/user/login`, data)\n      console.log('data', dataa)\n      if (dataa.success == true) {\n        toast.success('Login successfully')\n        localStorage.setItem('token', dataa.token)\n        localStorage.setItem('patientRecord', JSON.stringify(dataa?.user))\n        setTimeout(() => {\n          window.location.reload()\n          setLoading(false)\n        }, 1000)\n        // window.location.reload()\n      }\n\n      if (dataa?.response?.data?.success === false) {\n        setLoading(false)\n        toast.warning('Invalid Credentials')\n      }\n      // console.log(data)\n    } catch (error) {\n      setLoading(false)\n      toast.warning('Something went wrong')\n      console.log(error)\n    }\n  }\n\n  const nevigateToRegister = () => {\n    navigate('/register')\n  }\n  return (\n    <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\n      {loading ? <SpinnerOverlay message=\"Logging..\" /> : ''}\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md={5}>\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm>\n                    <h2>Login</h2>\n                    <p className=\"text-medium-emphasis\">Sign In to your account</p>\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupText>\n                        <CIcon icon={cilUser} />\n                      </CInputGroupText>\n                      <CFormInput\n                        placeholder=\"Email\"\n                        autoComplete=\"email\"\n                        name=\"email\"\n                        value={data.email}\n                        onChange={handleChange}\n                      />\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupText>\n                        <CIcon icon={cilLockLocked} />\n                      </CInputGroupText>\n                      <CFormInput\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        autoComplete=\"current-password\"\n                        name=\"password\"\n                        value={data.password}\n                        onChange={handleChange}\n                      />\n                    </CInputGroup>\n                    <CRow>\n                      <CCol xs={12} style={{ textAlign: 'center' }}>\n                        <CButton color=\"primary\" className=\"px-5\" onClick={handleSubmit}>\n                          Login\n                        </CButton>\n                      </CCol>\n                      {/* <CCol xs={6} className=\"text-right\">\n                        <CButton color=\"link\" className=\"px-0\">\n                          Forgot password?\n                        </CButton>\n                      </CCol> */}\n                    </CRow>\n                    <CRow>\n                      <p style={{ display: 'flex', marginTop: '1rem' }}>\n                        For register Click! &nbsp;\n                        <p\n                          style={{ cursor: 'pointer', color: 'blue' }}\n                          onClick={nevigateToRegister}\n                        >\n                          Signup\n                        </p>\n                      </p>\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n              {/* <CCard className=\"text-white bg-primary py-5\" style={{ width: '44%' }}>\n                <CCardBody className=\"text-center\">\n                  <div>\n                    <h2>Sign up</h2>\n                    <p>\n                      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n                      tempor incididunt ut labore et dolore magna aliqua.\n                    </p>\n                    <Link to=\"/register\">\n                      <CButton color=\"primary\" className=\"mt-3\" active tabIndex={-1}>\n                        Register Now!\n                      </CButton>\n                    </Link>\n                  </div>\n                </CCardBody>\n              </CCard> */}\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n      <ToastContainer />\n    </div>\n  )\n}\n\nexport default Login\n","// SpinnerOverlay.js\nimport React from 'react'\nimport { BarLoader } from 'react-spinners'\n\nconst SpinnerOverlay = (loading) => {\n  const message = loading.message\n  return (\n    <div style={overlayStyle(loading)}>\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        <BarLoader loading={loading} color=\"#36D7B7\" />\n        {message ? <p style={{ margin: 'auto' }}>{message}</p> : ''}\n      </div>\n    </div>\n  )\n}\n\nconst overlayStyle = (loading) => ({\n  position: 'fixed',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%',\n  backgroundColor: 'rgba(255, 255, 255, 0.7)',\n  display: loading ? 'flex' : 'none',\n  justifyContent: 'center',\n  alignItems: 'center',\n  zIndex: 9999,\n})\n\nexport default SpinnerOverlay\n"],"names":["getFetch","async","token","localStorage","getItem","axios","method","url","concat","headers","Authorization","error","console","log","postFetchFile","data","post","putFetchData","response","_error$response3","status","postFetchData","_error$response5","Login","API_URL","process","navigate","useNavigate","setData","useState","email","password","loading","setLoading","handleChange","e","name","value","target","_jsxs","className","children","_jsx","SpinnerOverlay","message","CContainer","CRow","CCol","md","CCardGroup","CCard","CCardBody","CForm","CInputGroup","CInputGroupText","CIcon","icon","cilUser","CFormInput","placeholder","autoComplete","onChange","cilLockLocked","type","xs","style","textAlign","CButton","color","onClick","_dataa$response","_dataa$response$data","preventDefault","dataa","success","toast","setItem","JSON","stringify","user","setTimeout","window","location","reload","warning","display","marginTop","cursor","nevigateToRegister","ToastContainer","overlayStyle","position","top","left","width","height","backgroundColor","justifyContent","alignItems","zIndex","flexDirection","BarLoader","margin"],"sourceRoot":""}