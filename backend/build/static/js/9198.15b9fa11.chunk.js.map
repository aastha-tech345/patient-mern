{"version":3,"file":"static/js/9198.15b9fa11.chunk.js","mappings":"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","sources":["views/dashboard/Dashboard.js","views/widgets/WidgetsDropdown.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { getFetch } from '../../api/Api'\n// import {\n//   CAvatar,\n//   CButton,\n//   CButtonGroup,\n//   CCard,\n//   CCardBody,\n//   CCardFooter,\n//   CCardHeader,\n//   CCol,\n//   CProgress,\n//   CRow,\n//   CTable,\n//   CTableBody,\n//   CTableDataCell,\n//   CTableHead,\n//   CTableHeaderCell,\n//   CTableRow,\n// } from '@coreui/react'\n// import { CChartLine } from '@coreui/react-chartjs'\n// import { getStyle, hexToRgba } from '@coreui/utils'\n// import CIcon from '@coreui/icons-react'\n// import {\n//   cibCcAmex,\n//   cibCcApplePay,\n//   cibCcMastercard,\n//   cibCcPaypal,\n//   cibCcStripe,\n//   cibCcVisa,\n//   cibGoogle,\n//   cibFacebook,\n//   cibLinkedin,\n//   cifBr,\n//   cifEs,\n//   cifFr,\n//   cifIn,\n//   cifPl,\n//   cifUs,\n//   cibTwitter,\n//   cilCloudDownload,\n//   cilPeople,\n//   cilUser,\n//   cilUserFemale,\n// } from '@coreui/icons'\n\n// import avatar1 from 'src/assets/images/avatars/1.jpg'\n// import avatar2 from 'src/assets/images/avatars/2.jpg'\n// import avatar3 from 'src/assets/images/avatars/3.jpg'\n// import avatar4 from 'src/assets/images/avatars/4.jpg'\n// import avatar5 from 'src/assets/images/avatars/5.jpg'\n// import avatar6 from 'src/assets/images/avatars/6.jpg'\n\n// import WidgetsBrand from '../widgets/WidgetsBrand'\nimport WidgetsDropdown from '../widgets/WidgetsDropdown'\n// import { API_URL } from 'src/constant'\n\nconst Dashboard = () => {\n  // let data = process.env.API_URL\n  // console.log('data', data)\n  // const random = (min, max) => Math.floor(Math.random() * (max - min + 1) + min)\n\n  // const progressExample = [\n  //   { title: 'Visits', value: '29.703 Users', percent: 40, color: 'success' },\n  //   { title: 'Unique', value: '24.093 Users', percent: 20, color: 'info' },\n  //   { title: 'Pageviews', value: '78.706 Views', percent: 60, color: 'warning' },\n  //   { title: 'New Users', value: '22.123 Users', percent: 80, color: 'danger' },\n  //   { title: 'Bounce Rate', value: 'Average Rate', percent: 40.15, color: 'primary' },\n  // ]\n\n  // const progressGroupExample1 = [\n  //   { title: 'Monday', value1: 34, value2: 78 },\n  //   { title: 'Tuesday', value1: 56, value2: 94 },\n  //   { title: 'Wednesday', value1: 12, value2: 67 },\n  //   { title: 'Thursday', value1: 43, value2: 91 },\n  //   { title: 'Friday', value1: 22, value2: 73 },\n  //   { title: 'Saturday', value1: 53, value2: 82 },\n  //   { title: 'Sunday', value1: 9, value2: 69 },\n  // ]\n\n  // const progressGroupExample2 = [\n  //   { title: 'Male', icon: cilUser, value: 53 },\n  //   { title: 'Female', icon: cilUserFemale, value: 43 },\n  // ]\n\n  // const progressGroupExample3 = [\n  //   { title: 'Organic Search', icon: cibGoogle, percent: 56, value: '191,235' },\n  //   { title: 'Facebook', icon: cibFacebook, percent: 15, value: '51,223' },\n  //   { title: 'Twitter', icon: cibTwitter, percent: 11, value: '37,564' },\n  //   { title: 'LinkedIn', icon: cibLinkedin, percent: 8, value: '27,319' },\n  // ]\n\n  // const tableExample = [\n  //   {\n  //     avatar: { src: avatar1, status: 'success' },\n  //     user: {\n  //       name: 'Yiorgos Avraamu',\n  //       new: true,\n  //       registered: 'Jan 1, 2021',\n  //     },\n  //     country: { name: 'USA', flag: cifUs },\n  //     usage: {\n  //       value: 50,\n  //       period: 'Jun 11, 2021 - Jul 10, 2021',\n  //       color: 'success',\n  //     },\n  //     payment: { name: 'Mastercard', icon: cibCcMastercard },\n  //     activity: '10 sec ago',\n  //   },\n  //   {\n  //     avatar: { src: avatar2, status: 'danger' },\n  //     user: {\n  //       name: 'Avram Tarasios',\n  //       new: false,\n  //       registered: 'Jan 1, 2021',\n  //     },\n  //     country: { name: 'Brazil', flag: cifBr },\n  //     usage: {\n  //       value: 22,\n  //       period: 'Jun 11, 2021 - Jul 10, 2021',\n  //       color: 'info',\n  //     },\n  //     payment: { name: 'Visa', icon: cibCcVisa },\n  //     activity: '5 minutes ago',\n  //   },\n  //   {\n  //     avatar: { src: avatar3, status: 'warning' },\n  //     user: { name: 'Quintin Ed', new: true, registered: 'Jan 1, 2021' },\n  //     country: { name: 'India', flag: cifIn },\n  //     usage: {\n  //       value: 74,\n  //       period: 'Jun 11, 2021 - Jul 10, 2021',\n  //       color: 'warning',\n  //     },\n  //     payment: { name: 'Stripe', icon: cibCcStripe },\n  //     activity: '1 hour ago',\n  //   },\n  //   {\n  //     avatar: { src: avatar4, status: 'secondary' },\n  //     user: { name: 'Enéas Kwadwo', new: true, registered: 'Jan 1, 2021' },\n  //     country: { name: 'France', flag: cifFr },\n  //     usage: {\n  //       value: 98,\n  //       period: 'Jun 11, 2021 - Jul 10, 2021',\n  //       color: 'danger',\n  //     },\n  //     payment: { name: 'PayPal', icon: cibCcPaypal },\n  //     activity: 'Last month',\n  //   },\n  //   {\n  //     avatar: { src: avatar5, status: 'success' },\n  //     user: {\n  //       name: 'Agapetus Tadeáš',\n  //       new: true,\n  //       registered: 'Jan 1, 2021',\n  //     },\n  //     country: { name: 'Spain', flag: cifEs },\n  //     usage: {\n  //       value: 22,\n  //       period: 'Jun 11, 2021 - Jul 10, 2021',\n  //       color: 'primary',\n  //     },\n  //     payment: { name: 'Google Wallet', icon: cibCcApplePay },\n  //     activity: 'Last week',\n  //   },\n  //   {\n  //     avatar: { src: avatar6, status: 'danger' },\n  //     user: {\n  //       name: 'Friderik Dávid',\n  //       new: true,\n  //       registered: 'Jan 1, 2021',\n  //     },\n  //     country: { name: 'Poland', flag: cifPl },\n  //     usage: {\n  //       value: 43,\n  //       period: 'Jun 11, 2021 - Jul 10, 2021',\n  //       color: 'success',\n  //     },\n  //     payment: { name: 'Amex', icon: cibCcAmex },\n  //     activity: 'Last week',\n  //   },\n  // ]\n  let API_URL = process.env.REACT_APP_API_URL\n  // console.log('dataenv', API_URL)\n  let patientData = localStorage.getItem('patientRecord')\n  let patientRecord = JSON.parse(patientData)\n  // console.log('patientRecord', patientRecord?.name)\n  const [numberOfPatient, setNumberOfPatient] = useState('')\n  const [apointmentList, setAppointmentList] = useState([])\n  const [greeting, setGreeting] = useState('')\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // const response = await getFetch(`${API_URL}/api/patient/doc/${patientRecord._id}`)\n        const response = await getFetch(`${API_URL}/api/patient/patientByDoctor`)\n        console.log('dasRes', response)\n        setNumberOfPatient(response?.data?.data?.length)\n        setAppointmentList(response?.data?.data)\n      } catch (error) {\n        console.error('Error fetching data:', error)\n      }\n    }\n    fetchData()\n  }, [])\n\n  let appointmentDataList = []\n  const today = new Date()\n  const todayYear = today?.getFullYear()\n  const todayMonth = today?.getMonth()\n  const todayDay = today?.getDate()\n  for (let i = 0; i < apointmentList.length; i++) {\n    const element = new Date(apointmentList[i]?.nextApointmentDate)\n    const givenYear = element?.getFullYear()\n    const givenMonth = element?.getMonth()\n    const givenDay = element?.getDate()\n    if (todayYear === givenYear && todayMonth === givenMonth && todayDay === givenDay) {\n      appointmentDataList.push(apointmentList[i])\n      console.log('hello')\n    } else {\n      console.log(\"Today's date does not match the given date.\")\n    }\n  }\n\n  console.log('appointmentDataList', appointmentDataList)\n\n  return (\n    <>\n      <div className=\"mb-5 mt-2\" style={{ textAlign: 'center' }}>\n        <h2>Welcome, {patientRecord?.name} </h2>\n      </div>\n      <WidgetsDropdown\n        numberOfPatient={numberOfPatient}\n        appointmentDataList={appointmentDataList}\n      />\n      {/* <div style={{ display: 'flx' }}>\n        <div></div>\n        <div>\n          <WidgetsDropdown numberOfPatient={numberOfPatient} />\n        </div>\n      </div> */}\n      {/* <CCard className=\"mb-4\">\n        <CCardBody>\n          <CRow>\n            <CCol sm={5}>\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\n                Traffic\n              </h4>\n              <div className=\"small text-medium-emphasis\">January - July 2021</div>\n            </CCol>\n            <CCol sm={7} className=\"d-none d-md-block\">\n              <CButton color=\"primary\" className=\"float-end\">\n                <CIcon icon={cilCloudDownload} />\n              </CButton>\n              <CButtonGroup className=\"float-end me-3\">\n                {['Day', 'Month', 'Year'].map((value) => (\n                  <CButton\n                    color=\"outline-secondary\"\n                    key={value}\n                    className=\"mx-0\"\n                    active={value === 'Month'}\n                  >\n                    {value}\n                  </CButton>\n                ))}\n              </CButtonGroup>\n            </CCol>\n          </CRow>\n          <CChartLine\n            style={{ height: '300px', marginTop: '40px' }}\n            data={{\n              labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n              datasets: [\n                {\n                  label: 'My First dataset',\n                  backgroundColor: hexToRgba(getStyle('--cui-info'), 10),\n                  borderColor: getStyle('--cui-info'),\n                  pointHoverBackgroundColor: getStyle('--cui-info'),\n                  borderWidth: 2,\n                  data: [\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                  ],\n                  fill: true,\n                },\n                {\n                  label: 'My Second dataset',\n                  backgroundColor: 'transparent',\n                  borderColor: getStyle('--cui-success'),\n                  pointHoverBackgroundColor: getStyle('--cui-success'),\n                  borderWidth: 2,\n                  data: [\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                  ],\n                },\n                {\n                  label: 'My Third dataset',\n                  backgroundColor: 'transparent',\n                  borderColor: getStyle('--cui-danger'),\n                  pointHoverBackgroundColor: getStyle('--cui-danger'),\n                  borderWidth: 1,\n                  borderDash: [8, 5],\n                  data: [65, 65, 65, 65, 65, 65, 65],\n                },\n              ],\n            }}\n            options={{\n              maintainAspectRatio: false,\n              plugins: {\n                legend: {\n                  display: false,\n                },\n              },\n              scales: {\n                x: {\n                  grid: {\n                    drawOnChartArea: false,\n                  },\n                },\n                y: {\n                  ticks: {\n                    beginAtZero: true,\n                    maxTicksLimit: 5,\n                    stepSize: Math.ceil(250 / 5),\n                    max: 250,\n                  },\n                },\n              },\n              elements: {\n                line: {\n                  tension: 0.4,\n                },\n                point: {\n                  radius: 0,\n                  hitRadius: 10,\n                  hoverRadius: 4,\n                  hoverBorderWidth: 3,\n                },\n              },\n            }}\n          />\n        </CCardBody>\n        <CCardFooter>\n          <CRow xs={{ cols: 1 }} md={{ cols: 5 }} className=\"text-center\">\n            {progressExample.map((item, index) => (\n              <CCol className=\"mb-sm-2 mb-0\" key={index}>\n                <div className=\"text-medium-emphasis\">{item.title}</div>\n                <strong>\n                  {item.value} ({item.percent}%)\n                </strong>\n                <CProgress thin className=\"mt-2\" color={item.color} value={item.percent} />\n              </CCol>\n            ))}\n          </CRow>\n        </CCardFooter>\n      </CCard>\n\n      <WidgetsBrand withCharts /> */}\n\n      {/* <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>Traffic {' & '} Sales</CCardHeader>\n            <CCardBody>\n              <CRow>\n                <CCol xs={12} md={6} xl={6}>\n                  <CRow>\n                    <CCol sm={6}>\n                      <div className=\"border-start border-start-4 border-start-info py-1 px-3\">\n                        <div className=\"text-medium-emphasis small\">New Clients</div>\n                        <div className=\"fs-5 fw-semibold\">9,123</div>\n                      </div>\n                    </CCol>\n                    <CCol sm={6}>\n                      <div className=\"border-start border-start-4 border-start-danger py-1 px-3 mb-3\">\n                        <div className=\"text-medium-emphasis small\">Recurring Clients</div>\n                        <div className=\"fs-5 fw-semibold\">22,643</div>\n                      </div>\n                    </CCol>\n                  </CRow>\n\n                  <hr className=\"mt-0\" />\n                  {progressGroupExample1.map((item, index) => (\n                    <div className=\"progress-group mb-4\" key={index}>\n                      <div className=\"progress-group-prepend\">\n                        <span className=\"text-medium-emphasis small\">{item.title}</span>\n                      </div>\n                      <div className=\"progress-group-bars\">\n                        <CProgress thin color=\"info\" value={item.value1} />\n                        <CProgress thin color=\"danger\" value={item.value2} />\n                      </div>\n                    </div>\n                  ))}\n                </CCol>\n\n                <CCol xs={12} md={6} xl={6}>\n                  <CRow>\n                    <CCol sm={6}>\n                      <div className=\"border-start border-start-4 border-start-warning py-1 px-3 mb-3\">\n                        <div className=\"text-medium-emphasis small\">Pageviews</div>\n                        <div className=\"fs-5 fw-semibold\">78,623</div>\n                      </div>\n                    </CCol>\n                    <CCol sm={6}>\n                      <div className=\"border-start border-start-4 border-start-success py-1 px-3 mb-3\">\n                        <div className=\"text-medium-emphasis small\">Organic</div>\n                        <div className=\"fs-5 fw-semibold\">49,123</div>\n                      </div>\n                    </CCol>\n                  </CRow>\n\n                  <hr className=\"mt-0\" />\n\n                  {progressGroupExample2.map((item, index) => (\n                    <div className=\"progress-group mb-4\" key={index}>\n                      <div className=\"progress-group-header\">\n                        <CIcon className=\"me-2\" icon={item.icon} size=\"lg\" />\n                        <span>{item.title}</span>\n                        <span className=\"ms-auto fw-semibold\">{item.value}%</span>\n                      </div>\n                      <div className=\"progress-group-bars\">\n                        <CProgress thin color=\"warning\" value={item.value} />\n                      </div>\n                    </div>\n                  ))}\n\n                  <div className=\"mb-5\"></div>\n\n                  {progressGroupExample3.map((item, index) => (\n                    <div className=\"progress-group\" key={index}>\n                      <div className=\"progress-group-header\">\n                        <CIcon className=\"me-2\" icon={item.icon} size=\"lg\" />\n                        <span>{item.title}</span>\n                        <span className=\"ms-auto fw-semibold\">\n                          {item.value}{' '}\n                          <span className=\"text-medium-emphasis small\">({item.percent}%)</span>\n                        </span>\n                      </div>\n                      <div className=\"progress-group-bars\">\n                        <CProgress thin color=\"success\" value={item.percent} />\n                      </div>\n                    </div>\n                  ))}\n                </CCol>\n              </CRow>\n\n              <br />\n\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell className=\"text-center\">\n                      <CIcon icon={cilPeople} />\n                    </CTableHeaderCell>\n                    <CTableHeaderCell>User</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Country</CTableHeaderCell>\n                    <CTableHeaderCell>Usage</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Payment Method</CTableHeaderCell>\n                    <CTableHeaderCell>Activity</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {tableExample.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index}>\n                      <CTableDataCell className=\"text-center\">\n                        <CAvatar size=\"md\" src={item.avatar.src} status={item.avatar.status} />\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div>{item.user.name}</div>\n                        <div className=\"small text-medium-emphasis\">\n                          <span>{item.user.new ? 'New' : 'Recurring'}</span> | Registered:{' '}\n                          {item.user.registered}\n                        </div>\n                      </CTableDataCell>\n                      <CTableDataCell className=\"text-center\">\n                        <CIcon size=\"xl\" icon={item.country.flag} title={item.country.name} />\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div className=\"clearfix\">\n                          <div className=\"float-start\">\n                            <strong>{item.usage.value}%</strong>\n                          </div>\n                          <div className=\"float-end\">\n                            <small className=\"text-medium-emphasis\">{item.usage.period}</small>\n                          </div>\n                        </div>\n                        <CProgress thin color={item.usage.color} value={item.usage.value} />\n                      </CTableDataCell>\n                      <CTableDataCell className=\"text-center\">\n                        <CIcon size=\"xl\" icon={item.payment.icon} />\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div className=\"small text-medium-emphasis\">Last login</div>\n                        <strong>{item.activity}</strong>\n                      </CTableDataCell>\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow> */}\n    </>\n  )\n}\n\nexport default Dashboard\n","import React from 'react'\nimport {\n  CRow,\n  CCol,\n  CDropdown,\n  CDropdownMenu,\n  CDropdownItem,\n  CDropdownToggle,\n  CWidgetStatsA,\n} from '@coreui/react'\nimport { getStyle } from '@coreui/utils'\nimport { CChartBar, CChartLine } from '@coreui/react-chartjs'\nimport CIcon from '@coreui/icons-react'\nimport { cilArrowBottom, cilArrowTop, cilOptions } from '@coreui/icons'\nimport PropTypes from 'prop-types'\n\nconst WidgetsDropdown = ({ numberOfPatient, appointmentDataList }) => {\n  WidgetsDropdown.propTypes = {\n    numberOfPatient: PropTypes.any.isRequired,\n    appointmentDataList: PropTypes.any.isRequired,\n  }\n\n  // console.log(numberOfPatient)\n  return (\n    <CRow>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"primary\"\n          value={\n            <>\n              Patient <div className=\"fs-6 fw-normal\">Number of Patients : {numberOfPatient}</div>\n            </>\n          }\n          // title=\"Users\"\n          // action={\n          //   <CDropdown alignment=\"end\">\n          //     <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n          //       <CIcon icon={cilOptions} className=\"text-high-emphasis-inverse\" />\n          //     </CDropdownToggle>\n          //     <CDropdownMenu>\n          //       <CDropdownItem>Action</CDropdownItem>\n          //       <CDropdownItem>Another action</CDropdownItem>\n          //       <CDropdownItem>Something else here...</CDropdownItem>\n          //       <CDropdownItem disabled>Disabled action</CDropdownItem>\n          //     </CDropdownMenu>\n          //   </CDropdown>\n          // }\n          chart={\n            <CChartLine\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              // data={{\n              //   labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n              //   datasets: [\n              //     {\n              //       label: 'My First dataset',\n              //       backgroundColor: 'transparent',\n              //       borderColor: 'rgba(255,255,255,.55)',\n              //       pointBackgroundColor: getStyle('--cui-primary'),\n              //       data: [65, 59, 84, 84, 51, 55, 40],\n              //     },\n              //   ],\n              // }}\n              // options={{\n              //   plugins: {\n              //     legend: {\n              //       display: false,\n              //     },\n              //   },\n              //   maintainAspectRatio: false,\n              //   scales: {\n              //     x: {\n              //       grid: {\n              //         display: false,\n              //         drawBorder: false,\n              //       },\n              //       ticks: {\n              //         display: false,\n              //       },\n              //     },\n              //     y: {\n              //       min: 30,\n              //       max: 89,\n              //       display: false,\n              //       grid: {\n              //         display: false,\n              //       },\n              //       ticks: {\n              //         display: false,\n              //       },\n              //     },\n              //   },\n              //   elements: {\n              //     line: {\n              //       borderWidth: 1,\n              //       tension: 0.4,\n              //     },\n              //     point: {\n              //       radius: 4,\n              //       hitRadius: 10,\n              //       hoverRadius: 4,\n              //     },\n              //   },\n              // }}\n            />\n          }\n        />\n      </CCol>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"primary\"\n          value={\n            <>\n              Patient{' '}\n              <div className=\"fs-6 fw-normal\">\n                Today Appointment : {appointmentDataList?.length}\n              </div>\n            </>\n          }\n          // title=\"Users\"\n          // action={\n          //   <CDropdown alignment=\"end\">\n          //     <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n          //       <CIcon icon={cilOptions} className=\"text-high-emphasis-inverse\" />\n          //     </CDropdownToggle>\n          //     <CDropdownMenu>\n          //       <CDropdownItem>Action</CDropdownItem>\n          //       <CDropdownItem>Another action</CDropdownItem>\n          //       <CDropdownItem>Something else here...</CDropdownItem>\n          //       <CDropdownItem disabled>Disabled action</CDropdownItem>\n          //     </CDropdownMenu>\n          //   </CDropdown>\n          // }\n          chart={\n            <CChartLine\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              // data={{\n              //   labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n              //   datasets: [\n              //     {\n              //       label: 'My First dataset',\n              //       backgroundColor: 'transparent',\n              //       borderColor: 'rgba(255,255,255,.55)',\n              //       pointBackgroundColor: getStyle('--cui-primary'),\n              //       data: [65, 59, 84, 84, 51, 55, 40],\n              //     },\n              //   ],\n              // }}\n              // options={{\n              //   plugins: {\n              //     legend: {\n              //       display: false,\n              //     },\n              //   },\n              //   maintainAspectRatio: false,\n              //   scales: {\n              //     x: {\n              //       grid: {\n              //         display: false,\n              //         drawBorder: false,\n              //       },\n              //       ticks: {\n              //         display: false,\n              //       },\n              //     },\n              //     y: {\n              //       min: 30,\n              //       max: 89,\n              //       display: false,\n              //       grid: {\n              //         display: false,\n              //       },\n              //       ticks: {\n              //         display: false,\n              //       },\n              //     },\n              //   },\n              //   elements: {\n              //     line: {\n              //       borderWidth: 1,\n              //       tension: 0.4,\n              //     },\n              //     point: {\n              //       radius: 4,\n              //       hitRadius: 10,\n              //       hoverRadius: 4,\n              //     },\n              //   },\n              // }}\n            />\n          }\n        />\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default WidgetsDropdown\n"],"names":["Dashboard","patientData","localStorage","getItem","patientRecord","JSON","parse","numberOfPatient","setNumberOfPatient","useState","apointmentList","setAppointmentList","greeting","setGreeting","useEffect","async","_response$data","_response$data$data","_response$data2","response","getFetch","concat","process","console","log","data","length","error","fetchData","appointmentDataList","today","Date","todayYear","getFullYear","todayMonth","getMonth","todayDay","getDate","i","_apointmentList$i","element","nextApointmentDate","givenYear","givenMonth","givenDay","push","_jsxs","_Fragment","children","_jsx","className","style","textAlign","name","WidgetsDropdown","_ref","CRow","CCol","sm","lg","CWidgetStatsA","color","value","chart","CChartLine","height"],"sourceRoot":""}